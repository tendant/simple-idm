# Quick IDM - Minimal Configuration
# Copy this file to .env and update values for your environment

# =============================================================================
# APPLICATION (REQUIRED)
# =============================================================================
BASE_URL=http://localhost:4000
FRONTEND_URL=http://localhost:3000

# =============================================================================
# DATABASE (REQUIRED)
# =============================================================================
IDM_PG_HOST=localhost
IDM_PG_PORT=5432
IDM_PG_DATABASE=idm_db
IDM_PG_USER=idm
IDM_PG_PASSWORD=pwd
IDM_PG_SCHEMA=public

# =============================================================================
# EMAIL (REQUIRED for magic link / passwordless login)
# =============================================================================
# For local development, use Mailpit (docker/start-mailpit.sh)
EMAIL_HOST=localhost
EMAIL_PORT=1025
EMAIL_FROM=noreply@example.com
EMAIL_USERNAME=
EMAIL_PASSWORD=
EMAIL_TLS=false

# Production SMTP example:
# EMAIL_HOST=smtp.gmail.com
# EMAIL_PORT=587
# EMAIL_FROM=your-email@gmail.com
# EMAIL_USERNAME=your-email@gmail.com
# EMAIL_PASSWORD=your-app-password
# EMAIL_TLS=true

# =============================================================================
# JWT (AUTO-CONFIGURED - Optional overrides)
# =============================================================================
# RSA private key file (auto-generated on first run if missing)
JWT_KEY_FILE=jwt-private.pem

# JWT issuer (used in OIDC claims)
JWT_ISSUER=quick-idm

# Token expiration (ISO 8601 duration format)
ACCESS_TOKEN_EXPIRY=15m
REFRESH_TOKEN_EXPIRY=24h
TEMP_TOKEN_EXPIRY=10m

# =============================================================================
# REGISTRATION (Optional)
# =============================================================================
REGISTRATION_ENABLED=true
REGISTRATION_DEFAULT_ROLE=user

# =============================================================================
# MAGIC LINK (Optional)
# =============================================================================
MAGIC_LINK_EXPIRATION=1h

# =============================================================================
# ADMIN ROLES (Optional)
# =============================================================================
# Comma-separated list of role names that grant administrative privileges
# These roles can access admin-only endpoints (user management, OAuth2 clients, etc.)
# Default: admin,superadmin
#
# Examples:
# ADMIN_ROLE_NAMES=admin,superadmin              # Default - both grant admin access
# ADMIN_ROLE_NAMES=administrator                 # Single custom admin role
# ADMIN_ROLE_NAMES=admin,superadmin,root,sysadmin  # Multiple admin roles
#
# Note: The FIRST role in the list is used when creating the initial admin user
# All roles in the list grant admin permissions when checking access
ADMIN_ROLE_NAMES=admin,superadmin

# =============================================================================
# OAUTH2 CLIENTS (Optional - Environment-based configuration)
# =============================================================================
# Configure OAuth2/OIDC clients directly via environment variables
# Perfect for small deployments with a few known clients
# No database storage or encryption needed - secrets stored in plain text in env
#
# Format:
#   OAUTH2_CLIENTS=client1,client2,client3
#   OAUTH2_CLIENT_<NAME>_ID=client-id
#   OAUTH2_CLIENT_<NAME>_SECRET=client-secret
#   OAUTH2_CLIENT_<NAME>_NAME=Display Name (optional, defaults to <NAME>)
#   OAUTH2_CLIENT_<NAME>_TYPE=confidential|public (optional, defaults to confidential)
#   OAUTH2_CLIENT_<NAME>_REDIRECT_URIS=https://app.com/callback,https://app.com/callback2
#   OAUTH2_CLIENT_<NAME>_SCOPES=openid profile email (optional, defaults to "openid profile email")
#
# Example - Configure a single client for your web app:
# OAUTH2_CLIENTS=webapp
# OAUTH2_CLIENT_WEBAPP_ID=my-web-app-client-id
# OAUTH2_CLIENT_WEBAPP_SECRET=my-super-secret-client-secret
# OAUTH2_CLIENT_WEBAPP_NAME=My Web Application
# OAUTH2_CLIENT_WEBAPP_REDIRECT_URIS=http://localhost:3000/auth/callback
# OAUTH2_CLIENT_WEBAPP_SCOPES=openid profile email
#
# Example - Configure multiple clients:
# OAUTH2_CLIENTS=webapp,mobileapp,adminui
# OAUTH2_CLIENT_WEBAPP_ID=web-client-id
# OAUTH2_CLIENT_WEBAPP_SECRET=web-secret
# OAUTH2_CLIENT_WEBAPP_REDIRECT_URIS=http://localhost:3000/callback
# OAUTH2_CLIENT_MOBILEAPP_ID=mobile-client-id
# OAUTH2_CLIENT_MOBILEAPP_SECRET=mobile-secret
# OAUTH2_CLIENT_MOBILEAPP_REDIRECT_URIS=myapp://auth/callback
# OAUTH2_CLIENT_ADMINUI_ID=admin-client-id
# OAUTH2_CLIENT_ADMINUI_SECRET=admin-secret
# OAUTH2_CLIENT_ADMINUI_REDIRECT_URIS=http://localhost:8080/callback

# =============================================================================
# COOKIES (Optional)
# =============================================================================
COOKIE_SECURE=false
COOKIE_HTTP_ONLY=true

# =============================================================================
# QUICK START GUIDE
# =============================================================================
# 1. Setup Database:
#    createdb idm_db
#    make migration-up
#
# 2. Start Email Server (development):
#    docker/start-mailpit.sh
#    # View emails at http://localhost:8025
#
# 3. Configure this file:
#    cp .env.example .env
#    # Edit database and email settings if needed
#
# 4. Run the service:
#    go run main.go
#    # RSA keys auto-generated on first run
#    # Admin credentials shown once - save them!
#
# 5. Test OIDC Discovery:
#    curl http://localhost:4000/.well-known/openid-configuration
#
# 6. Configure OAuth2 Clients (optional):
#    # Add OAUTH2_CLIENTS and related env vars to .env
#    # See "OAUTH2 CLIENTS" section above for examples
#    # Restart service to load new clients
#
# =============================================================================
# ENDPOINTS
# =============================================================================
# Authentication:
#   POST   /api/auth/login                    - Password login
#   POST   /api/auth/magic-link/email         - Request magic link
#   GET    /api/auth/magic-link/validate      - Validate magic link
#   POST   /api/auth/token/refresh            - Refresh access token
#   POST   /api/auth/logout                   - Logout
#
# Registration:
#   POST   /api/signup/passwordless           - Register without password
#   POST   /api/signup/register               - Register with password
#
# OAuth2/OIDC:
#   GET    /.well-known/openid-configuration  - OIDC discovery
#   GET    /.well-known/jwks.json             - Public keys
#   GET    /api/oauth2/authorize              - Authorization endpoint
#   POST   /api/oauth2/token                  - Token endpoint
#   GET    /api/oauth2/userinfo               - UserInfo endpoint
#
# Management (requires auth):
#   GET    /me                                - Current user info
#   *      /api/users/*                       - User management
#   *      /api/roles/*                       - Role management (admin)
#   *      /api/oauth2-clients/*              - OAuth2 client management (admin)
