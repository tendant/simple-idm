// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package twofadb

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const create2FAInit = `-- name: Create2FAInit :one
INSERT INTO login_2fa (login_id, two_factor_secret, two_factor_enabled, two_factor_type, two_factor_backup_codes)
VALUES ($1, $2, $3, $4, $5::TEXT[])
RETURNING id
`

type Create2FAInitParams struct {
	LoginID              uuid.UUID      `json:"login_id"`
	TwoFactorSecret      pgtype.Text    `json:"two_factor_secret"`
	TwoFactorEnabled     pgtype.Bool    `json:"two_factor_enabled"`
	TwoFactorType        sql.NullString `json:"two_factor_type"`
	TwoFactorBackupCodes []string       `json:"two_factor_backup_codes"`
}

// @two_factor_backup_codes TEXT[]
func (q *Queries) Create2FAInit(ctx context.Context, arg Create2FAInitParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, create2FAInit,
		arg.LoginID,
		arg.TwoFactorSecret,
		arg.TwoFactorEnabled,
		arg.TwoFactorType,
		arg.TwoFactorBackupCodes,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const delete2FA = `-- name: Delete2FA :exec
UPDATE login_2fa
SET deleted_at = now() AT TIME ZONE 'utc'
WHERE id = $1
AND login_id = $2
AND two_factor_type = $3
AND deleted_at IS NULL
`

type Delete2FAParams struct {
	ID            uuid.UUID      `json:"id"`
	LoginID       uuid.UUID      `json:"login_id"`
	TwoFactorType sql.NullString `json:"two_factor_type"`
}

func (q *Queries) Delete2FA(ctx context.Context, arg Delete2FAParams) error {
	_, err := q.db.Exec(ctx, delete2FA, arg.ID, arg.LoginID, arg.TwoFactorType)
	return err
}

const disable2FA = `-- name: Disable2FA :exec
UPDATE login_2fa
SET two_factor_enabled = FALSE,
    updated_at = now() AT TIME ZONE 'utc'
WHERE login_id = $1
AND two_factor_type = $2
AND deleted_at IS NULL
`

type Disable2FAParams struct {
	LoginID       uuid.UUID      `json:"login_id"`
	TwoFactorType sql.NullString `json:"two_factor_type"`
}

func (q *Queries) Disable2FA(ctx context.Context, arg Disable2FAParams) error {
	_, err := q.db.Exec(ctx, disable2FA, arg.LoginID, arg.TwoFactorType)
	return err
}

const enable2FA = `-- name: Enable2FA :exec
UPDATE login_2fa
SET two_factor_enabled = TRUE,
    updated_at = now() AT TIME ZONE 'utc'
WHERE login_id = $1
AND two_factor_type = $2
AND deleted_at IS NULL
`

type Enable2FAParams struct {
	LoginID       uuid.UUID      `json:"login_id"`
	TwoFactorType sql.NullString `json:"two_factor_type"`
}

func (q *Queries) Enable2FA(ctx context.Context, arg Enable2FAParams) error {
	_, err := q.db.Exec(ctx, enable2FA, arg.LoginID, arg.TwoFactorType)
	return err
}

const findEnabledTwoFAs = `-- name: FindEnabledTwoFAs :many
SELECT id, login_id, two_factor_type, two_factor_enabled, created_at
FROM login_2fa
WHERE login_id = $1
AND two_factor_enabled = TRUE
AND deleted_at IS NULL
`

type FindEnabledTwoFAsRow struct {
	ID               uuid.UUID      `json:"id"`
	LoginID          uuid.UUID      `json:"login_id"`
	TwoFactorType    sql.NullString `json:"two_factor_type"`
	TwoFactorEnabled pgtype.Bool    `json:"two_factor_enabled"`
	CreatedAt        time.Time      `json:"created_at"`
}

func (q *Queries) FindEnabledTwoFAs(ctx context.Context, loginID uuid.UUID) ([]FindEnabledTwoFAsRow, error) {
	rows, err := q.db.Query(ctx, findEnabledTwoFAs, loginID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindEnabledTwoFAsRow
	for rows.Next() {
		var i FindEnabledTwoFAsRow
		if err := rows.Scan(
			&i.ID,
			&i.LoginID,
			&i.TwoFactorType,
			&i.TwoFactorEnabled,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findTwoFAsByLoginId = `-- name: FindTwoFAsByLoginId :many
SELECT id, login_id, two_factor_type, two_factor_enabled, created_at, updated_at
FROM login_2fa
WHERE login_id = $1
AND deleted_at IS NULL
`

type FindTwoFAsByLoginIdRow struct {
	ID               uuid.UUID      `json:"id"`
	LoginID          uuid.UUID      `json:"login_id"`
	TwoFactorType    sql.NullString `json:"two_factor_type"`
	TwoFactorEnabled pgtype.Bool    `json:"two_factor_enabled"`
	CreatedAt        time.Time      `json:"created_at"`
	UpdatedAt        sql.NullTime   `json:"updated_at"`
}

func (q *Queries) FindTwoFAsByLoginId(ctx context.Context, loginID uuid.UUID) ([]FindTwoFAsByLoginIdRow, error) {
	rows, err := q.db.Query(ctx, findTwoFAsByLoginId, loginID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindTwoFAsByLoginIdRow
	for rows.Next() {
		var i FindTwoFAsByLoginIdRow
		if err := rows.Scan(
			&i.ID,
			&i.LoginID,
			&i.TwoFactorType,
			&i.TwoFactorEnabled,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const get2FAById = `-- name: Get2FAById :one
SELECT id, two_factor_enabled
FROM login_2fa
WHERE id = $1
AND login_id = $2
AND two_factor_type = $3
AND deleted_at IS NULL
`

type Get2FAByIdParams struct {
	ID            uuid.UUID      `json:"id"`
	LoginID       uuid.UUID      `json:"login_id"`
	TwoFactorType sql.NullString `json:"two_factor_type"`
}

type Get2FAByIdRow struct {
	ID               uuid.UUID   `json:"id"`
	TwoFactorEnabled pgtype.Bool `json:"two_factor_enabled"`
}

func (q *Queries) Get2FAById(ctx context.Context, arg Get2FAByIdParams) (Get2FAByIdRow, error) {
	row := q.db.QueryRow(ctx, get2FAById, arg.ID, arg.LoginID, arg.TwoFactorType)
	var i Get2FAByIdRow
	err := row.Scan(&i.ID, &i.TwoFactorEnabled)
	return i, err
}

const get2FAByLoginId = `-- name: Get2FAByLoginId :one
SELECT id, login_id, two_factor_secret, two_factor_enabled
FROM login_2fa
WHERE login_id = $1
AND two_factor_type = $2
AND deleted_at IS NULL
`

type Get2FAByLoginIdParams struct {
	LoginID       uuid.UUID      `json:"login_id"`
	TwoFactorType sql.NullString `json:"two_factor_type"`
}

type Get2FAByLoginIdRow struct {
	ID               uuid.UUID   `json:"id"`
	LoginID          uuid.UUID   `json:"login_id"`
	TwoFactorSecret  pgtype.Text `json:"two_factor_secret"`
	TwoFactorEnabled pgtype.Bool `json:"two_factor_enabled"`
}

func (q *Queries) Get2FAByLoginId(ctx context.Context, arg Get2FAByLoginIdParams) (Get2FAByLoginIdRow, error) {
	row := q.db.QueryRow(ctx, get2FAByLoginId, arg.LoginID, arg.TwoFactorType)
	var i Get2FAByLoginIdRow
	err := row.Scan(
		&i.ID,
		&i.LoginID,
		&i.TwoFactorSecret,
		&i.TwoFactorEnabled,
	)
	return i, err
}

const getUsersByLoginId = `-- name: GetUsersByLoginId :many
SELECT u.id, u.name, u.email, u.created_at, u.last_modified_at,
       COALESCE(array_agg(r.name) FILTER (WHERE r.name IS NOT NULL), '{}') as roles
FROM users u
LEFT JOIN user_roles ur ON u.id = ur.user_id
LEFT JOIN roles r ON ur.role_id = r.id
WHERE u.login_id = $1
AND u.deleted_at IS NULL
GROUP BY u.id, u.name, u.email, u.created_at, u.last_modified_at
`

type GetUsersByLoginIdRow struct {
	ID             uuid.UUID      `json:"id"`
	Name           sql.NullString `json:"name"`
	Email          string         `json:"email"`
	CreatedAt      time.Time      `json:"created_at"`
	LastModifiedAt time.Time      `json:"last_modified_at"`
	Roles          interface{}    `json:"roles"`
}

func (q *Queries) GetUsersByLoginId(ctx context.Context, loginID uuid.NullUUID) ([]GetUsersByLoginIdRow, error) {
	rows, err := q.db.Query(ctx, getUsersByLoginId, loginID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUsersByLoginIdRow
	for rows.Next() {
		var i GetUsersByLoginIdRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.CreatedAt,
			&i.LastModifiedAt,
			&i.Roles,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
