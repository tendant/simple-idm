// Package logins provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/discord-gophers/goapi-gen version v0.3.0 DO NOT EDIT.
package logins

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"encoding/xml"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/discord-gophers/goapi-gen/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/go-chi/render"
)

// CreateLoginRequest defines model for CreateLoginRequest.
type CreateLoginRequest struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// Login defines model for Login.
type Login struct {
	CreatedAt        *time.Time `json:"created_at,omitempty"`
	ID               *string    `json:"id,omitempty"`
	PasswordVersion  *int       `json:"password_version,omitempty"`
	TwoFactorEnabled *bool      `json:"two_factor_enabled,omitempty"`
	UpdatedAt        *time.Time `json:"updated_at,omitempty"`
	Username         *string    `json:"username,omitempty"`
}

// SuccessResponse defines model for SuccessResponse.
type SuccessResponse struct {
	Result string `json:"result,omitempty"`
}

// TwoFactorMethod defines model for TwoFactorMethod.
type TwoFactorMethod struct {
	Enabled     bool   `json:"enabled"`
	TwoFactorID string `json:"two_factor_id,omitempty"`
	Type        string `json:"type"`
}

// TwoFactorMethods defines model for TwoFactorMethods.
type TwoFactorMethods struct {
	Count   int               `json:"count"`
	Methods []TwoFactorMethod `json:"methods"`
}

// UpdateLoginRequest defines model for UpdateLoginRequest.
type UpdateLoginRequest struct {
	Username string `json:"username"`
}

// GetParams defines parameters for Get.
type GetParams struct {
	// Maximum number of logins to return
	Limit *int `json:"limit,omitempty"`

	// Offset for pagination
	Offset *int `json:"offset,omitempty"`

	// Search term for filtering logins
	Search *string `json:"search,omitempty"`
}

// PostJSONBody defines parameters for Post.
type PostJSONBody CreateLoginRequest

// PutIDJSONBody defines parameters for PutID.
type PutIDJSONBody UpdateLoginRequest

// Post2faDisableJSONBody defines parameters for Post2faDisable.
type Post2faDisableJSONBody struct {
	TwofaType Post2faDisableJSONBodyTwofaType `json:"twofa_type"`
}

// Post2faDisableJSONBodyTwofaType defines parameters for Post2faDisable.
type Post2faDisableJSONBodyTwofaType string

// Post2faEnableJSONBody defines parameters for Post2faEnable.
type Post2faEnableJSONBody struct {
	TwofaType Post2faEnableJSONBodyTwofaType `json:"twofa_type"`
}

// Post2faEnableJSONBodyTwofaType defines parameters for Post2faEnable.
type Post2faEnableJSONBodyTwofaType string

// Post2faSetupJSONBody defines parameters for Post2faSetup.
type Post2faSetupJSONBody struct {
	TwofaType Post2faSetupJSONBodyTwofaType `json:"twofa_type"`
}

// Post2faSetupJSONBodyTwofaType defines parameters for Post2faSetup.
type Post2faSetupJSONBodyTwofaType string

// PostJSONRequestBody defines body for Post for application/json ContentType.
type PostJSONRequestBody PostJSONBody

// Bind implements render.Binder.
func (PostJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// PutIDJSONRequestBody defines body for PutID for application/json ContentType.
type PutIDJSONRequestBody PutIDJSONBody

// Bind implements render.Binder.
func (PutIDJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// Post2faDisableJSONRequestBody defines body for Post2faDisable for application/json ContentType.
type Post2faDisableJSONRequestBody Post2faDisableJSONBody

// Bind implements render.Binder.
func (Post2faDisableJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// Post2faEnableJSONRequestBody defines body for Post2faEnable for application/json ContentType.
type Post2faEnableJSONRequestBody Post2faEnableJSONBody

// Bind implements render.Binder.
func (Post2faEnableJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// Post2faSetupJSONRequestBody defines body for Post2faSetup for application/json ContentType.
type Post2faSetupJSONRequestBody Post2faSetupJSONBody

// Bind implements render.Binder.
func (Post2faSetupJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// Response is a common response struct for all the API calls.
// A Response object may be instantiated via functions for specific operation responses.
// It may also be instantiated directly, for the purpose of responding with a single status code.
type Response struct {
	body        interface{}
	Code        int
	contentType string
}

// Render implements the render.Renderer interface. It sets the Content-Type header
// and status code based on the response definition.
func (resp *Response) Render(w http.ResponseWriter, r *http.Request) error {
	w.Header().Set("Content-Type", resp.contentType)
	render.Status(r, resp.Code)
	return nil
}

// Status is a builder method to override the default status code for a response.
func (resp *Response) Status(code int) *Response {
	resp.Code = code
	return resp
}

// ContentType is a builder method to override the default content type for a response.
func (resp *Response) ContentType(contentType string) *Response {
	resp.contentType = contentType
	return resp
}

// MarshalJSON implements the json.Marshaler interface.
// This is used to only marshal the body of the response.
func (resp *Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(resp.body)
}

// MarshalXML implements the xml.Marshaler interface.
// This is used to only marshal the body of the response.
func (resp *Response) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return e.Encode(resp.body)
}

// GetJSON200Response is a constructor method for a Get response.
// A *Response is returned with the configured status code and content type from the spec.
func GetJSON200Response(body struct {
	Logins []Login `json:"logins,omitempty"`

	// Total number of logins
	Total *int `json:"total,omitempty"`
}) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// PostJSON201Response is a constructor method for a Post response.
// A *Response is returned with the configured status code and content type from the spec.
func PostJSON201Response(body Login) *Response {
	return &Response{
		body:        body,
		Code:        201,
		contentType: "application/json",
	}
}

// PostJSON400Response is a constructor method for a Post response.
// A *Response is returned with the configured status code and content type from the spec.
func PostJSON400Response(body struct {
	Message *string `json:"message,omitempty"`
}) *Response {
	return &Response{
		body:        body,
		Code:        400,
		contentType: "application/json",
	}
}

// DeleteIDJSON404Response is a constructor method for a DeleteID response.
// A *Response is returned with the configured status code and content type from the spec.
func DeleteIDJSON404Response(body struct {
	Message *string `json:"message,omitempty"`
}) *Response {
	return &Response{
		body:        body,
		Code:        404,
		contentType: "application/json",
	}
}

// GetIDJSON200Response is a constructor method for a GetID response.
// A *Response is returned with the configured status code and content type from the spec.
func GetIDJSON200Response(body Login) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// GetIDJSON404Response is a constructor method for a GetID response.
// A *Response is returned with the configured status code and content type from the spec.
func GetIDJSON404Response(body struct {
	Message *string `json:"message,omitempty"`
}) *Response {
	return &Response{
		body:        body,
		Code:        404,
		contentType: "application/json",
	}
}

// PutIDJSON200Response is a constructor method for a PutID response.
// A *Response is returned with the configured status code and content type from the spec.
func PutIDJSON200Response(body Login) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// PutIDJSON404Response is a constructor method for a PutID response.
// A *Response is returned with the configured status code and content type from the spec.
func PutIDJSON404Response(body struct {
	Message *string `json:"message,omitempty"`
}) *Response {
	return &Response{
		body:        body,
		Code:        404,
		contentType: "application/json",
	}
}

// Get2faMethodsByLoginIDJSON200Response is a constructor method for a Get2faMethodsByLoginID response.
// A *Response is returned with the configured status code and content type from the spec.
func Get2faMethodsByLoginIDJSON200Response(body TwoFactorMethods) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// Get2faMethodsByLoginIDJSON404Response is a constructor method for a Get2faMethodsByLoginID response.
// A *Response is returned with the configured status code and content type from the spec.
func Get2faMethodsByLoginIDJSON404Response(body struct {
	Message *string `json:"message,omitempty"`
}) *Response {
	return &Response{
		body:        body,
		Code:        404,
		contentType: "application/json",
	}
}

// Post2faDisableJSON200Response is a constructor method for a Post2faDisable response.
// A *Response is returned with the configured status code and content type from the spec.
func Post2faDisableJSON200Response(body SuccessResponse) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// Post2faEnableJSON200Response is a constructor method for a Post2faEnable response.
// A *Response is returned with the configured status code and content type from the spec.
func Post2faEnableJSON200Response(body SuccessResponse) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// Post2faSetupJSON201Response is a constructor method for a Post2faSetup response.
// A *Response is returned with the configured status code and content type from the spec.
func Post2faSetupJSON201Response(body SuccessResponse) *Response {
	return &Response{
		body:        body,
		Code:        201,
		contentType: "application/json",
	}
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all logins
	// (GET /)
	Get(w http.ResponseWriter, r *http.Request, params GetParams) *Response
	// Create a new login
	// (POST /)
	Post(w http.ResponseWriter, r *http.Request) *Response
	// Delete login
	// (DELETE /{id})
	DeleteID(w http.ResponseWriter, r *http.Request, id string) *Response
	// Get login by ID
	// (GET /{id})
	GetID(w http.ResponseWriter, r *http.Request, id string) *Response
	// Update login
	// (PUT /{id})
	PutID(w http.ResponseWriter, r *http.Request, id string) *Response
	// Get login 2FA methods
	// (GET /{id}/2fa)
	Get2faMethodsByLoginID(w http.ResponseWriter, r *http.Request, id string) *Response
	// Disable an existing 2FA method
	// (POST /{id}/2fa/disable)
	Post2faDisable(w http.ResponseWriter, r *http.Request, id string) *Response
	// Enable an existing 2FA method
	// (POST /{id}/2fa/enable)
	Post2faEnable(w http.ResponseWriter, r *http.Request, id string) *Response
	// Create a new 2FA method
	// (POST /{id}/2fa/setup)
	Post2faSetup(w http.ResponseWriter, r *http.Request, id string) *Response
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler          ServerInterface
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// Get operation middleware
func (siw *ServerInterfaceWrapper) Get(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// Parameter object where we will unmarshal all parameters from the context
	var params GetParams

	// ------------- Optional query parameter "limit" -------------

	if err := runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit); err != nil {
		err = fmt.Errorf("invalid format for parameter limit: %w", err)
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "limit"})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	if err := runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset); err != nil {
		err = fmt.Errorf("invalid format for parameter offset: %w", err)
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "offset"})
		return
	}

	// ------------- Optional query parameter "search" -------------

	if err := runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search); err != nil {
		err = fmt.Errorf("invalid format for parameter search: %w", err)
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "search"})
		return
	}

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.Get(w, r, params)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// Post operation middleware
func (siw *ServerInterfaceWrapper) Post(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.Post(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// DeleteID operation middleware
func (siw *ServerInterfaceWrapper) DeleteID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Path parameter "id" -------------
	var id string

	if err := runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "id"})
		return
	}

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.DeleteID(w, r, id)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// GetID operation middleware
func (siw *ServerInterfaceWrapper) GetID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Path parameter "id" -------------
	var id string

	if err := runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "id"})
		return
	}

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.GetID(w, r, id)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// PutID operation middleware
func (siw *ServerInterfaceWrapper) PutID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Path parameter "id" -------------
	var id string

	if err := runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "id"})
		return
	}

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.PutID(w, r, id)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// Get2faMethodsByLoginID operation middleware
func (siw *ServerInterfaceWrapper) Get2faMethodsByLoginID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Path parameter "id" -------------
	var id string

	if err := runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "id"})
		return
	}

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.Get2faMethodsByLoginID(w, r, id)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// Post2faDisable operation middleware
func (siw *ServerInterfaceWrapper) Post2faDisable(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Path parameter "id" -------------
	var id string

	if err := runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "id"})
		return
	}

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.Post2faDisable(w, r, id)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// Post2faEnable operation middleware
func (siw *ServerInterfaceWrapper) Post2faEnable(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Path parameter "id" -------------
	var id string

	if err := runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "id"})
		return
	}

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.Post2faEnable(w, r, id)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// Post2faSetup operation middleware
func (siw *ServerInterfaceWrapper) Post2faSetup(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Path parameter "id" -------------
	var id string

	if err := runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "id"})
		return
	}

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.Post2faSetup(w, r, id)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	err       error
	paramName string
}

// Error implements error.
func (err UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter %s: %v", err.paramName, err.err)
}

func (err UnescapedCookieParamError) Unwrap() error { return err.err }

type UnmarshalingParamError struct {
	err       error
	paramName string
}

// Error implements error.
func (err UnmarshalingParamError) Error() string {
	return fmt.Sprintf("error unmarshaling parameter %s as JSON: %v", err.paramName, err.err)
}

func (err UnmarshalingParamError) Unwrap() error { return err.err }

type RequiredParamError struct {
	err       error
	paramName string
}

// Error implements error.
func (err RequiredParamError) Error() string {
	if err.err == nil {
		return fmt.Sprintf("query parameter %s is required, but not found", err.paramName)
	} else {
		return fmt.Sprintf("query parameter %s is required, but errored: %s", err.paramName, err.err)
	}
}

func (err RequiredParamError) Unwrap() error { return err.err }

type RequiredHeaderError struct {
	paramName string
}

// Error implements error.
func (err RequiredHeaderError) Error() string {
	return fmt.Sprintf("header parameter %s is required, but not found", err.paramName)
}

type InvalidParamFormatError struct {
	err       error
	paramName string
}

// Error implements error.
func (err InvalidParamFormatError) Error() string {
	return fmt.Sprintf("invalid format for parameter %s: %v", err.paramName, err.err)
}

func (err InvalidParamFormatError) Unwrap() error { return err.err }

type TooManyValuesForParamError struct {
	NumValues int
	paramName string
}

// Error implements error.
func (err TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("expected one value for %s, got %d", err.paramName, err.NumValues)
}

// ParameterName is an interface that is implemented by error types that are
// relevant to a specific parameter.
type ParameterError interface {
	error
	// ParamName is the name of the parameter that the error is referring to.
	ParamName() string
}

func (err UnescapedCookieParamError) ParamName() string  { return err.paramName }
func (err UnmarshalingParamError) ParamName() string     { return err.paramName }
func (err RequiredParamError) ParamName() string         { return err.paramName }
func (err RequiredHeaderError) ParamName() string        { return err.paramName }
func (err InvalidParamFormatError) ParamName() string    { return err.paramName }
func (err TooManyValuesForParamError) ParamName() string { return err.paramName }

type ServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

type ServerOption func(*ServerOptions)

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface, opts ...ServerOption) http.Handler {
	options := &ServerOptions{
		BaseURL:    "/",
		BaseRouter: chi.NewRouter(),
		ErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
	}

	for _, f := range opts {
		f(options)
	}

	r := options.BaseRouter
	wrapper := ServerInterfaceWrapper{
		Handler:          si,
		ErrorHandlerFunc: options.ErrorHandlerFunc,
	}

	r.Route(options.BaseURL, func(r chi.Router) {
		r.Get("/", wrapper.Get)
		r.Post("/", wrapper.Post)
		r.Delete("/{id}", wrapper.DeleteID)
		r.Get("/{id}", wrapper.GetID)
		r.Put("/{id}", wrapper.PutID)
		r.Get("/{id}/2fa", wrapper.Get2faMethodsByLoginID)
		r.Post("/{id}/2fa/disable", wrapper.Post2faDisable)
		r.Post("/{id}/2fa/enable", wrapper.Post2faEnable)
		r.Post("/{id}/2fa/setup", wrapper.Post2faSetup)
	})
	return r
}

func WithRouter(r chi.Router) ServerOption {
	return func(s *ServerOptions) {
		s.BaseRouter = r
	}
}

func WithServerBaseURL(url string) ServerOption {
	return func(s *ServerOptions) {
		s.BaseURL = url
	}
}

func WithErrorHandler(handler func(w http.ResponseWriter, r *http.Request, err error)) ServerOption {
	return func(s *ServerOptions) {
		s.ErrorHandlerFunc = handler
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYW08buRf/Kpb//8ehCVn2YfPWLtsKqWir0j5VKDrMnAmufBnsYyBC+e4r2xPmmhAK",
	"osuqL1Hk8Zxz/Lsc23PHc6Mqo1GT4/M77vJLVBD//mkRCD+apdCf8cqjozBaWVOhJYFxTgXO3RhbhP+0",
	"qpDPuSMr9JKvM+4dWg0KRx6uM27xyguLBZ9/a2ZmTcTzbPOSufiOOYWIsZhhFXmstFhArLA0VoV/vADC",
	"AxIx7KA4UXTmei+KsWmbchbXaJ0wurUWoQmXaMMsujGLEnIydoEaLiS2AbkwRiLoiEhVPLrQ3SgOIDrz",
	"eY7OfUZXGe1wCJZF5yXtEy3jtwdLc2AqEkaDPLgG6ZHPyXpcZ/zLjXkfl3yKdGmKYaKdSLQQ25OJNPCQ",
	"kuLT7D73+ZPW5EakZrymcRGo5h1BqOKf/1ss+Zz/b9K4bFJbbNIHsMEfrIXVYGmb+FldxJhBvkaB7fbs",
	"D9jyUTCGKEKXJsYXJMNrsSLHTkHDEhVqYm8/nfCM37uKH76ZvpmGJZgKNVSCz/lvcSh4kC5j5ZPws8S4",
	"prAiCNlPCj7nH5DiRAsKCa3j8293vECXWxFL5HN+CrdCecW0VxdomSmZTEWRYRbJW81D3XzOrzzaFc94",
	"AolLoUSInngLuQssIXpoNs0GQlhn/cx/l6VDYqWxrIKl0LHsLclMnDueba9kZwg2v2SEVsWMpZCEgd16",
	"uVvyuvhaJ29fG+dBHKmrRDZm02lyhCZMnoCqkiKPy5t8d6lZNvG6Kqyr2dcsqfMPLJJxMgQywdSG4UsY",
	"HnDNxxDsuygMdYN9FI5aQcIE55UCu9o8BCnvn2a8Mm5Eo5/CaDIYOnpnitWj4NuFzshWve6auW5wPQIP",
	"n62Cmp8R7MIDVu/QzKXdqfRSRvaOnqQhhc7BMjYyvAVVxVbztW5aDKRFKFYMb4UjN9xS9mH+RF+DFAWz",
	"96i2qU+wM2AabxL9ccLkThTrJEmJhEMlHMfxk+Nhy4rWDP2ucWbcDbtEtl36wL454tqjoVsSSancMZKO",
	"npuklFCb0BW9Ln6MnH6QLjkJ5A0t2dZ942fRMH0p7xVIIKR7vUx+QEo0sosVOzmOHdaPNVj/kmQ+fxcf",
	"Obzt1cVfTEn19eU/0iAS3P2+PZmVsOuYOSuhvhy8W8X4r79/DG49I1DO3r9l6QKSsHw5DcxKqDO759HD",
	"eMBtLadZuOuKZFIIFy6ZcTFbD3yzEo7ref/uxtTlg25MCYvNlRu1V+E+iAqEDHcEFY5T4OkSNYWQxi6g",
	"qlrXxG238ybs+ShfL9fq+t9Jdmu+5nrrAXbnqZG1eG+csjVXS5MZ/308PoUzrmQO7TVahtYa2z/+pIoZ",
	"6HQADjfAJklPyulzyYNK/kv/EvIrF3L9Yez16Dhpbj8ZOyRfPajiszjrl4ifLuLDnyTiB74mPE7Ef+wU",
	"ce8jwlOU3Pla0NHwev1PAAAA//81DffRhxkAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
