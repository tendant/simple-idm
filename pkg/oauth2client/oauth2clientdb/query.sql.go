// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package oauth2clientdb

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const addClientRedirectURI = `-- name: AddClientRedirectURI :exec

INSERT INTO oauth2_client_redirect_uris (client_id, redirect_uri)
VALUES ($1, $2)
ON CONFLICT (client_id, redirect_uri) DO UPDATE SET deleted_at = NULL
`

type AddClientRedirectURIParams struct {
	ClientID    uuid.UUID `json:"client_id"`
	RedirectUri string    `json:"redirect_uri"`
}

// Redirect URI Operations
func (q *Queries) AddClientRedirectURI(ctx context.Context, arg AddClientRedirectURIParams) error {
	_, err := q.db.Exec(ctx, addClientRedirectURI, arg.ClientID, arg.RedirectUri)
	return err
}

const addClientScope = `-- name: AddClientScope :exec

INSERT INTO oauth2_client_scopes (client_id, scope_id)
VALUES ($1, $2)
ON CONFLICT (client_id, scope_id) DO UPDATE SET deleted_at = NULL
`

type AddClientScopeParams struct {
	ClientID uuid.UUID `json:"client_id"`
	ScopeID  uuid.UUID `json:"scope_id"`
}

// Client-Scope Relationship Operations
func (q *Queries) AddClientScope(ctx context.Context, arg AddClientScopeParams) error {
	_, err := q.db.Exec(ctx, addClientScope, arg.ClientID, arg.ScopeID)
	return err
}

const clearClientRedirectURIs = `-- name: ClearClientRedirectURIs :exec
UPDATE oauth2_client_redirect_uris 
SET deleted_at = NOW() AT TIME ZONE 'UTC'
WHERE client_id = $1
`

func (q *Queries) ClearClientRedirectURIs(ctx context.Context, clientID uuid.UUID) error {
	_, err := q.db.Exec(ctx, clearClientRedirectURIs, clientID)
	return err
}

const clearClientScopes = `-- name: ClearClientScopes :exec
UPDATE oauth2_client_scopes 
SET deleted_at = NOW() AT TIME ZONE 'UTC'
WHERE client_id = $1
`

func (q *Queries) ClearClientScopes(ctx context.Context, clientID uuid.UUID) error {
	_, err := q.db.Exec(ctx, clearClientScopes, clientID)
	return err
}

const clientExists = `-- name: ClientExists :one
SELECT EXISTS(
    SELECT 1 FROM oauth2_clients 
    WHERE client_id = $1 AND deleted_at IS NULL
)
`

func (q *Queries) ClientExists(ctx context.Context, clientID string) (bool, error) {
	row := q.db.QueryRow(ctx, clientExists, clientID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createClient = `-- name: CreateClient :one
INSERT INTO oauth2_clients (
    client_id, client_secret_encrypted, client_name, client_type, 
    require_pkce, description, created_by
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
) RETURNING id, created_at, updated_at
`

type CreateClientParams struct {
	ClientID              string         `json:"client_id"`
	ClientSecretEncrypted string         `json:"client_secret_encrypted"`
	ClientName            string         `json:"client_name"`
	ClientType            string         `json:"client_type"`
	RequirePkce           bool           `json:"require_pkce"`
	Description           sql.NullString `json:"description"`
	CreatedBy             sql.NullString `json:"created_by"`
}

type CreateClientRow struct {
	ID        uuid.UUID    `json:"id"`
	CreatedAt sql.NullTime `json:"created_at"`
	UpdatedAt sql.NullTime `json:"updated_at"`
}

func (q *Queries) CreateClient(ctx context.Context, arg CreateClientParams) (CreateClientRow, error) {
	row := q.db.QueryRow(ctx, createClient,
		arg.ClientID,
		arg.ClientSecretEncrypted,
		arg.ClientName,
		arg.ClientType,
		arg.RequirePkce,
		arg.Description,
		arg.CreatedBy,
	)
	var i CreateClientRow
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}

const deleteClient = `-- name: DeleteClient :exec
UPDATE oauth2_clients 
SET deleted_at = NOW() AT TIME ZONE 'UTC'
WHERE client_id = $1 AND deleted_at IS NULL
`

func (q *Queries) DeleteClient(ctx context.Context, clientID string) error {
	_, err := q.db.Exec(ctx, deleteClient, clientID)
	return err
}

const getAllScopes = `-- name: GetAllScopes :many

SELECT id, name, description, created_at, updated_at
FROM scopes 
WHERE deleted_at IS NULL
ORDER BY name
`

type GetAllScopesRow struct {
	ID          uuid.UUID      `json:"id"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	CreatedAt   sql.NullTime   `json:"created_at"`
	UpdatedAt   sql.NullTime   `json:"updated_at"`
}

// Scope Operations
func (q *Queries) GetAllScopes(ctx context.Context) ([]GetAllScopesRow, error) {
	rows, err := q.db.Query(ctx, getAllScopes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllScopesRow
	for rows.Next() {
		var i GetAllScopesRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getClient = `-- name: GetClient :one

SELECT 
    c.id, c.client_id, c.client_secret_encrypted, c.client_name, c.client_type,
    c.require_pkce, c.description, c.created_at, c.updated_at, c.created_by,
    COALESCE(array_agg(DISTINCT s.name) FILTER (WHERE s.name IS NOT NULL AND ocs.deleted_at IS NULL), '{}') as scopes,
    COALESCE(array_agg(DISTINCT uri.redirect_uri) FILTER (WHERE uri.redirect_uri IS NOT NULL AND uri.deleted_at IS NULL), '{}') as redirect_uris
FROM oauth2_clients c
LEFT JOIN oauth2_client_scopes ocs ON c.id = ocs.client_id AND ocs.deleted_at IS NULL
LEFT JOIN scopes s ON ocs.scope_id = s.id AND s.deleted_at IS NULL
LEFT JOIN oauth2_client_redirect_uris uri ON c.id = uri.client_id AND uri.deleted_at IS NULL
WHERE c.client_id = $1 AND c.deleted_at IS NULL
GROUP BY c.id, c.client_id, c.client_secret_encrypted, c.client_name, c.client_type,
         c.require_pkce, c.description, c.created_at, c.updated_at, c.created_by
`

type GetClientRow struct {
	ID                    uuid.UUID      `json:"id"`
	ClientID              string         `json:"client_id"`
	ClientSecretEncrypted string         `json:"client_secret_encrypted"`
	ClientName            string         `json:"client_name"`
	ClientType            string         `json:"client_type"`
	RequirePkce           bool           `json:"require_pkce"`
	Description           sql.NullString `json:"description"`
	CreatedAt             sql.NullTime   `json:"created_at"`
	UpdatedAt             sql.NullTime   `json:"updated_at"`
	CreatedBy             sql.NullString `json:"created_by"`
	Scopes                interface{}    `json:"scopes"`
	RedirectUris          interface{}    `json:"redirect_uris"`
}

// OAuth2 Client CRUD Operations
func (q *Queries) GetClient(ctx context.Context, clientID string) (GetClientRow, error) {
	row := q.db.QueryRow(ctx, getClient, clientID)
	var i GetClientRow
	err := row.Scan(
		&i.ID,
		&i.ClientID,
		&i.ClientSecretEncrypted,
		&i.ClientName,
		&i.ClientType,
		&i.RequirePkce,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.Scopes,
		&i.RedirectUris,
	)
	return i, err
}

const getClientByID = `-- name: GetClientByID :one
SELECT 
    c.id, c.client_id, c.client_secret_encrypted, c.client_name, c.client_type,
    c.require_pkce, c.description, c.created_at, c.updated_at, c.created_by,
    COALESCE(array_agg(DISTINCT s.name) FILTER (WHERE s.name IS NOT NULL AND ocs.deleted_at IS NULL), '{}') as scopes,
    COALESCE(array_agg(DISTINCT uri.redirect_uri) FILTER (WHERE uri.redirect_uri IS NOT NULL AND uri.deleted_at IS NULL), '{}') as redirect_uris
FROM oauth2_clients c
LEFT JOIN oauth2_client_scopes ocs ON c.id = ocs.client_id AND ocs.deleted_at IS NULL
LEFT JOIN scopes s ON ocs.scope_id = s.id AND s.deleted_at IS NULL
LEFT JOIN oauth2_client_redirect_uris uri ON c.id = uri.client_id AND uri.deleted_at IS NULL
WHERE c.id = $1 AND c.deleted_at IS NULL
GROUP BY c.id, c.client_id, c.client_secret_encrypted, c.client_name, c.client_type,
         c.require_pkce, c.description, c.created_at, c.updated_at, c.created_by
`

type GetClientByIDRow struct {
	ID                    uuid.UUID      `json:"id"`
	ClientID              string         `json:"client_id"`
	ClientSecretEncrypted string         `json:"client_secret_encrypted"`
	ClientName            string         `json:"client_name"`
	ClientType            string         `json:"client_type"`
	RequirePkce           bool           `json:"require_pkce"`
	Description           sql.NullString `json:"description"`
	CreatedAt             sql.NullTime   `json:"created_at"`
	UpdatedAt             sql.NullTime   `json:"updated_at"`
	CreatedBy             sql.NullString `json:"created_by"`
	Scopes                interface{}    `json:"scopes"`
	RedirectUris          interface{}    `json:"redirect_uris"`
}

func (q *Queries) GetClientByID(ctx context.Context, id uuid.UUID) (GetClientByIDRow, error) {
	row := q.db.QueryRow(ctx, getClientByID, id)
	var i GetClientByIDRow
	err := row.Scan(
		&i.ID,
		&i.ClientID,
		&i.ClientSecretEncrypted,
		&i.ClientName,
		&i.ClientType,
		&i.RequirePkce,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.Scopes,
		&i.RedirectUris,
	)
	return i, err
}

const getClientCount = `-- name: GetClientCount :one
SELECT COUNT(*) FROM oauth2_clients WHERE deleted_at IS NULL
`

func (q *Queries) GetClientCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getClientCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const listClients = `-- name: ListClients :many
SELECT 
    c.id, c.client_id, c.client_secret_encrypted, c.client_name, c.client_type,
    c.require_pkce, c.description, c.created_at, c.updated_at, c.created_by,
    COALESCE(array_agg(DISTINCT s.name) FILTER (WHERE s.name IS NOT NULL AND ocs.deleted_at IS NULL), '{}') as scopes,
    COALESCE(array_agg(DISTINCT uri.redirect_uri) FILTER (WHERE uri.redirect_uri IS NOT NULL AND uri.deleted_at IS NULL), '{}') as redirect_uris
FROM oauth2_clients c
LEFT JOIN oauth2_client_scopes ocs ON c.id = ocs.client_id AND ocs.deleted_at IS NULL
LEFT JOIN scopes s ON ocs.scope_id = s.id AND s.deleted_at IS NULL
LEFT JOIN oauth2_client_redirect_uris uri ON c.id = uri.client_id AND uri.deleted_at IS NULL
WHERE c.deleted_at IS NULL
GROUP BY c.id, c.client_id, c.client_secret_encrypted, c.client_name, c.client_type,
         c.require_pkce, c.description, c.created_at, c.updated_at, c.created_by
ORDER BY c.created_at DESC
`

type ListClientsRow struct {
	ID                    uuid.UUID      `json:"id"`
	ClientID              string         `json:"client_id"`
	ClientSecretEncrypted string         `json:"client_secret_encrypted"`
	ClientName            string         `json:"client_name"`
	ClientType            string         `json:"client_type"`
	RequirePkce           bool           `json:"require_pkce"`
	Description           sql.NullString `json:"description"`
	CreatedAt             sql.NullTime   `json:"created_at"`
	UpdatedAt             sql.NullTime   `json:"updated_at"`
	CreatedBy             sql.NullString `json:"created_by"`
	Scopes                interface{}    `json:"scopes"`
	RedirectUris          interface{}    `json:"redirect_uris"`
}

func (q *Queries) ListClients(ctx context.Context) ([]ListClientsRow, error) {
	rows, err := q.db.Query(ctx, listClients)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListClientsRow
	for rows.Next() {
		var i ListClientsRow
		if err := rows.Scan(
			&i.ID,
			&i.ClientID,
			&i.ClientSecretEncrypted,
			&i.ClientName,
			&i.ClientType,
			&i.RequirePkce,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CreatedBy,
			&i.Scopes,
			&i.RedirectUris,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeClientRedirectURI = `-- name: RemoveClientRedirectURI :exec
UPDATE oauth2_client_redirect_uris 
SET deleted_at = NOW() AT TIME ZONE 'UTC'
WHERE client_id = $1 AND redirect_uri = $2
`

type RemoveClientRedirectURIParams struct {
	ClientID    uuid.UUID `json:"client_id"`
	RedirectUri string    `json:"redirect_uri"`
}

func (q *Queries) RemoveClientRedirectURI(ctx context.Context, arg RemoveClientRedirectURIParams) error {
	_, err := q.db.Exec(ctx, removeClientRedirectURI, arg.ClientID, arg.RedirectUri)
	return err
}

const removeClientScope = `-- name: RemoveClientScope :exec
UPDATE oauth2_client_scopes 
SET deleted_at = NOW() AT TIME ZONE 'UTC'
WHERE client_id = $1 AND scope_id = $2
`

type RemoveClientScopeParams struct {
	ClientID uuid.UUID `json:"client_id"`
	ScopeID  uuid.UUID `json:"scope_id"`
}

func (q *Queries) RemoveClientScope(ctx context.Context, arg RemoveClientScopeParams) error {
	_, err := q.db.Exec(ctx, removeClientScope, arg.ClientID, arg.ScopeID)
	return err
}

const updateClient = `-- name: UpdateClient :exec
UPDATE oauth2_clients 
SET client_secret_encrypted = $2, client_name = $3, client_type = $4,
    require_pkce = $5, description = $6, updated_at = NOW() AT TIME ZONE 'UTC'
WHERE client_id = $1 AND deleted_at IS NULL
`

type UpdateClientParams struct {
	ClientID              string         `json:"client_id"`
	ClientSecretEncrypted string         `json:"client_secret_encrypted"`
	ClientName            string         `json:"client_name"`
	ClientType            string         `json:"client_type"`
	RequirePkce           bool           `json:"require_pkce"`
	Description           sql.NullString `json:"description"`
}

func (q *Queries) UpdateClient(ctx context.Context, arg UpdateClientParams) error {
	_, err := q.db.Exec(ctx, updateClient,
		arg.ClientID,
		arg.ClientSecretEncrypted,
		arg.ClientName,
		arg.ClientType,
		arg.RequirePkce,
		arg.Description,
	)
	return err
}
