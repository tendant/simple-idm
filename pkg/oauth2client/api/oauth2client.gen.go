// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/discord-gophers/goapi-gen version v0.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"encoding/xml"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/discord-gophers/goapi-gen/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/go-chi/render"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// ClientListResponse defines model for ClientListResponse.
type ClientListResponse struct {
	Clients []ClientResponse `json:"clients"`

	// Maximum number of clients returned
	Limit int `json:"limit"`

	// Number of clients skipped
	Offset int `json:"offset"`

	// Total number of clients
	Total int `json:"total"`
}

// ClientRegistrationRequest defines model for ClientRegistrationRequest.
type ClientRegistrationRequest struct {
	ClientID string `json:"client_id"`

	// Human-readable name of the client
	ClientName string `json:"client_name"`

	// Client type
	ClientType *string `json:"client_type,omitempty"`

	// Array of OAuth2 grant types
	GrantTypes []string `json:"grant_types,omitempty"`

	// Array of redirect URIs
	RedirectUris []string `json:"redirect_uris"`

	// Array of OAuth2 response types
	ResponseTypes []string `json:"response_types,omitempty"`

	// Space-separated list of scope values
	Scope *string `json:"scope,omitempty"`
}

// ClientRegistrationResponse defines model for ClientRegistrationResponse.
type ClientRegistrationResponse struct {
	// The client identifier
	ClientID string `json:"client_id"`

	// Human-readable name of the client
	ClientName string `json:"client_name"`

	// The client secret (only returned on creation)
	ClientSecret *string `json:"client_secret,omitempty"`

	// Client type
	ClientType string `json:"client_type"`

	// Client creation timestamp
	CreatedAt time.Time `json:"created_at"`

	// Array of OAuth2 grant types
	GrantTypes []string `json:"grant_types"`

	// Array of redirect URIs
	RedirectUris []string `json:"redirect_uris"`

	// Array of OAuth2 response types
	ResponseTypes []string `json:"response_types"`

	// Space-separated list of scope values
	Scope *string `json:"scope,omitempty"`

	// Client last update timestamp
	UpdatedAt time.Time `json:"updated_at"`
}

// ClientResponse defines model for ClientResponse.
type ClientResponse struct {
	// The client identifier
	ClientID string `json:"client_id"`

	// Human-readable name of the client
	ClientName string `json:"client_name"`

	// Client type
	ClientType string `json:"client_type"`

	// Client creation timestamp
	CreatedAt time.Time `json:"created_at"`

	// Array of OAuth2 grant types
	GrantTypes []string `json:"grant_types"`

	// Array of redirect URIs
	RedirectUris []string `json:"redirect_uris"`

	// Array of OAuth2 response types
	ResponseTypes []string `json:"response_types"`

	// Space-separated list of scope values
	Scope *string `json:"scope,omitempty"`

	// Client last update timestamp
	UpdatedAt time.Time `json:"updated_at"`
}

// ClientSecretResponse defines model for ClientSecretResponse.
type ClientSecretResponse struct {
	// The client identifier
	ClientID string `json:"client_id"`

	// The new client secret
	ClientSecret string `json:"client_secret"`

	// Timestamp when secret was regenerated
	UpdatedAt time.Time `json:"updated_at"`
}

// ClientUpdateRequest defines model for ClientUpdateRequest.
type ClientUpdateRequest struct {
	// Human-readable name of the client
	ClientName *string `json:"client_name,omitempty"`

	// Client type
	ClientType *string `json:"client_type,omitempty"`

	// Array of OAuth2 grant types
	GrantTypes []string `json:"grant_types,omitempty"`

	// Array of redirect URIs
	RedirectUris []string `json:"redirect_uris,omitempty"`

	// Array of OAuth2 response types
	ResponseTypes []string `json:"response_types,omitempty"`

	// Space-separated list of scope values
	Scope *string `json:"scope,omitempty"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Error code
	Error string `json:"error"`

	// Human-readable error description
	ErrorDescription string `json:"error_description"`

	// URI to error documentation
	ErrorURI *string `json:"error_uri,omitempty"`
}

// ListClientsParams defines parameters for ListClients.
type ListClientsParams struct {
	// Maximum number of clients to return
	Limit *int `json:"limit,omitempty"`

	// Number of clients to skip
	Offset *int `json:"offset,omitempty"`

	// Filter by client type
	ClientType *string `json:"client_type,omitempty"`
}

// RegisterClientJSONBody defines parameters for RegisterClient.
type RegisterClientJSONBody ClientRegistrationRequest

// UpdateClientJSONBody defines parameters for UpdateClient.
type UpdateClientJSONBody ClientUpdateRequest

// RegisterClientJSONRequestBody defines body for RegisterClient for application/json ContentType.
type RegisterClientJSONRequestBody RegisterClientJSONBody

// Bind implements render.Binder.
func (RegisterClientJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// UpdateClientJSONRequestBody defines body for UpdateClient for application/json ContentType.
type UpdateClientJSONRequestBody UpdateClientJSONBody

// Bind implements render.Binder.
func (UpdateClientJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// Response is a common response struct for all the API calls.
// A Response object may be instantiated via functions for specific operation responses.
// It may also be instantiated directly, for the purpose of responding with a single status code.
type Response struct {
	body        interface{}
	Code        int
	contentType string
}

// Render implements the render.Renderer interface. It sets the Content-Type header
// and status code based on the response definition.
func (resp *Response) Render(w http.ResponseWriter, r *http.Request) error {
	w.Header().Set("Content-Type", resp.contentType)
	render.Status(r, resp.Code)
	return nil
}

// Status is a builder method to override the default status code for a response.
func (resp *Response) Status(code int) *Response {
	resp.Code = code
	return resp
}

// ContentType is a builder method to override the default content type for a response.
func (resp *Response) ContentType(contentType string) *Response {
	resp.contentType = contentType
	return resp
}

// MarshalJSON implements the json.Marshaler interface.
// This is used to only marshal the body of the response.
func (resp *Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(resp.body)
}

// MarshalXML implements the xml.Marshaler interface.
// This is used to only marshal the body of the response.
func (resp *Response) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return e.Encode(resp.body)
}

// ListClientsJSON200Response is a constructor method for a ListClients response.
// A *Response is returned with the configured status code and content type from the spec.
func ListClientsJSON200Response(body ClientListResponse) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// ListClientsJSON401Response is a constructor method for a ListClients response.
// A *Response is returned with the configured status code and content type from the spec.
func ListClientsJSON401Response(body ErrorResponse) *Response {
	return &Response{
		body:        body,
		Code:        401,
		contentType: "application/json",
	}
}

// ListClientsJSON403Response is a constructor method for a ListClients response.
// A *Response is returned with the configured status code and content type from the spec.
func ListClientsJSON403Response(body ErrorResponse) *Response {
	return &Response{
		body:        body,
		Code:        403,
		contentType: "application/json",
	}
}

// RegisterClientJSON201Response is a constructor method for a RegisterClient response.
// A *Response is returned with the configured status code and content type from the spec.
func RegisterClientJSON201Response(body ClientRegistrationResponse) *Response {
	return &Response{
		body:        body,
		Code:        201,
		contentType: "application/json",
	}
}

// RegisterClientJSON400Response is a constructor method for a RegisterClient response.
// A *Response is returned with the configured status code and content type from the spec.
func RegisterClientJSON400Response(body ErrorResponse) *Response {
	return &Response{
		body:        body,
		Code:        400,
		contentType: "application/json",
	}
}

// RegisterClientJSON401Response is a constructor method for a RegisterClient response.
// A *Response is returned with the configured status code and content type from the spec.
func RegisterClientJSON401Response(body ErrorResponse) *Response {
	return &Response{
		body:        body,
		Code:        401,
		contentType: "application/json",
	}
}

// RegisterClientJSON403Response is a constructor method for a RegisterClient response.
// A *Response is returned with the configured status code and content type from the spec.
func RegisterClientJSON403Response(body ErrorResponse) *Response {
	return &Response{
		body:        body,
		Code:        403,
		contentType: "application/json",
	}
}

// DeleteClientJSON401Response is a constructor method for a DeleteClient response.
// A *Response is returned with the configured status code and content type from the spec.
func DeleteClientJSON401Response(body ErrorResponse) *Response {
	return &Response{
		body:        body,
		Code:        401,
		contentType: "application/json",
	}
}

// DeleteClientJSON403Response is a constructor method for a DeleteClient response.
// A *Response is returned with the configured status code and content type from the spec.
func DeleteClientJSON403Response(body ErrorResponse) *Response {
	return &Response{
		body:        body,
		Code:        403,
		contentType: "application/json",
	}
}

// DeleteClientJSON404Response is a constructor method for a DeleteClient response.
// A *Response is returned with the configured status code and content type from the spec.
func DeleteClientJSON404Response(body ErrorResponse) *Response {
	return &Response{
		body:        body,
		Code:        404,
		contentType: "application/json",
	}
}

// GetClientJSON200Response is a constructor method for a GetClient response.
// A *Response is returned with the configured status code and content type from the spec.
func GetClientJSON200Response(body ClientResponse) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// GetClientJSON401Response is a constructor method for a GetClient response.
// A *Response is returned with the configured status code and content type from the spec.
func GetClientJSON401Response(body ErrorResponse) *Response {
	return &Response{
		body:        body,
		Code:        401,
		contentType: "application/json",
	}
}

// GetClientJSON403Response is a constructor method for a GetClient response.
// A *Response is returned with the configured status code and content type from the spec.
func GetClientJSON403Response(body ErrorResponse) *Response {
	return &Response{
		body:        body,
		Code:        403,
		contentType: "application/json",
	}
}

// GetClientJSON404Response is a constructor method for a GetClient response.
// A *Response is returned with the configured status code and content type from the spec.
func GetClientJSON404Response(body ErrorResponse) *Response {
	return &Response{
		body:        body,
		Code:        404,
		contentType: "application/json",
	}
}

// UpdateClientJSON200Response is a constructor method for a UpdateClient response.
// A *Response is returned with the configured status code and content type from the spec.
func UpdateClientJSON200Response(body ClientResponse) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// UpdateClientJSON400Response is a constructor method for a UpdateClient response.
// A *Response is returned with the configured status code and content type from the spec.
func UpdateClientJSON400Response(body ErrorResponse) *Response {
	return &Response{
		body:        body,
		Code:        400,
		contentType: "application/json",
	}
}

// UpdateClientJSON401Response is a constructor method for a UpdateClient response.
// A *Response is returned with the configured status code and content type from the spec.
func UpdateClientJSON401Response(body ErrorResponse) *Response {
	return &Response{
		body:        body,
		Code:        401,
		contentType: "application/json",
	}
}

// UpdateClientJSON403Response is a constructor method for a UpdateClient response.
// A *Response is returned with the configured status code and content type from the spec.
func UpdateClientJSON403Response(body ErrorResponse) *Response {
	return &Response{
		body:        body,
		Code:        403,
		contentType: "application/json",
	}
}

// UpdateClientJSON404Response is a constructor method for a UpdateClient response.
// A *Response is returned with the configured status code and content type from the spec.
func UpdateClientJSON404Response(body ErrorResponse) *Response {
	return &Response{
		body:        body,
		Code:        404,
		contentType: "application/json",
	}
}

// RegenerateClientSecretJSON200Response is a constructor method for a RegenerateClientSecret response.
// A *Response is returned with the configured status code and content type from the spec.
func RegenerateClientSecretJSON200Response(body ClientSecretResponse) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// RegenerateClientSecretJSON401Response is a constructor method for a RegenerateClientSecret response.
// A *Response is returned with the configured status code and content type from the spec.
func RegenerateClientSecretJSON401Response(body ErrorResponse) *Response {
	return &Response{
		body:        body,
		Code:        401,
		contentType: "application/json",
	}
}

// RegenerateClientSecretJSON403Response is a constructor method for a RegenerateClientSecret response.
// A *Response is returned with the configured status code and content type from the spec.
func RegenerateClientSecretJSON403Response(body ErrorResponse) *Response {
	return &Response{
		body:        body,
		Code:        403,
		contentType: "application/json",
	}
}

// RegenerateClientSecretJSON404Response is a constructor method for a RegenerateClientSecret response.
// A *Response is returned with the configured status code and content type from the spec.
func RegenerateClientSecretJSON404Response(body ErrorResponse) *Response {
	return &Response{
		body:        body,
		Code:        404,
		contentType: "application/json",
	}
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List OAuth2 Clients
	// (GET /)
	ListClients(w http.ResponseWriter, r *http.Request, params ListClientsParams) *Response
	// Register OAuth2 Client
	// (POST /)
	RegisterClient(w http.ResponseWriter, r *http.Request) *Response
	// Delete OAuth2 Client
	// (DELETE /{client_id})
	DeleteClient(w http.ResponseWriter, r *http.Request, clientID string) *Response
	// Get OAuth2 Client
	// (GET /{client_id})
	GetClient(w http.ResponseWriter, r *http.Request, clientID string) *Response
	// Update OAuth2 Client
	// (PUT /{client_id})
	UpdateClient(w http.ResponseWriter, r *http.Request, clientID string) *Response
	// Regenerate Client Secret
	// (POST /{client_id}/regenerate-secret)
	RegenerateClientSecret(w http.ResponseWriter, r *http.Request, clientID string) *Response
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler          ServerInterface
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// ListClients operation middleware
func (siw *ServerInterfaceWrapper) ListClients(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListClientsParams

	// ------------- Optional query parameter "limit" -------------

	if err := runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit); err != nil {
		err = fmt.Errorf("invalid format for parameter limit: %w", err)
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "limit"})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	if err := runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset); err != nil {
		err = fmt.Errorf("invalid format for parameter offset: %w", err)
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "offset"})
		return
	}

	// ------------- Optional query parameter "client_type" -------------

	if err := runtime.BindQueryParameter("form", true, false, "client_type", r.URL.Query(), &params.ClientType); err != nil {
		err = fmt.Errorf("invalid format for parameter client_type: %w", err)
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "client_type"})
		return
	}

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.ListClients(w, r, params)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// RegisterClient operation middleware
func (siw *ServerInterfaceWrapper) RegisterClient(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.RegisterClient(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// DeleteClient operation middleware
func (siw *ServerInterfaceWrapper) DeleteClient(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Path parameter "client_id" -------------
	var clientID string

	if err := runtime.BindStyledParameter("simple", false, "client_id", chi.URLParam(r, "client_id"), &clientID); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "client_id"})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.DeleteClient(w, r, clientID)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// GetClient operation middleware
func (siw *ServerInterfaceWrapper) GetClient(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Path parameter "client_id" -------------
	var clientID string

	if err := runtime.BindStyledParameter("simple", false, "client_id", chi.URLParam(r, "client_id"), &clientID); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "client_id"})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.GetClient(w, r, clientID)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// UpdateClient operation middleware
func (siw *ServerInterfaceWrapper) UpdateClient(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Path parameter "client_id" -------------
	var clientID string

	if err := runtime.BindStyledParameter("simple", false, "client_id", chi.URLParam(r, "client_id"), &clientID); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "client_id"})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.UpdateClient(w, r, clientID)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// RegenerateClientSecret operation middleware
func (siw *ServerInterfaceWrapper) RegenerateClientSecret(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Path parameter "client_id" -------------
	var clientID string

	if err := runtime.BindStyledParameter("simple", false, "client_id", chi.URLParam(r, "client_id"), &clientID); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "client_id"})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.RegenerateClientSecret(w, r, clientID)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	err       error
	paramName string
}

// Error implements error.
func (err UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter %s: %v", err.paramName, err.err)
}

func (err UnescapedCookieParamError) Unwrap() error { return err.err }

type UnmarshalingParamError struct {
	err       error
	paramName string
}

// Error implements error.
func (err UnmarshalingParamError) Error() string {
	return fmt.Sprintf("error unmarshaling parameter %s as JSON: %v", err.paramName, err.err)
}

func (err UnmarshalingParamError) Unwrap() error { return err.err }

type RequiredParamError struct {
	err       error
	paramName string
}

// Error implements error.
func (err RequiredParamError) Error() string {
	if err.err == nil {
		return fmt.Sprintf("query parameter %s is required, but not found", err.paramName)
	} else {
		return fmt.Sprintf("query parameter %s is required, but errored: %s", err.paramName, err.err)
	}
}

func (err RequiredParamError) Unwrap() error { return err.err }

type RequiredHeaderError struct {
	paramName string
}

// Error implements error.
func (err RequiredHeaderError) Error() string {
	return fmt.Sprintf("header parameter %s is required, but not found", err.paramName)
}

type InvalidParamFormatError struct {
	err       error
	paramName string
}

// Error implements error.
func (err InvalidParamFormatError) Error() string {
	return fmt.Sprintf("invalid format for parameter %s: %v", err.paramName, err.err)
}

func (err InvalidParamFormatError) Unwrap() error { return err.err }

type TooManyValuesForParamError struct {
	NumValues int
	paramName string
}

// Error implements error.
func (err TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("expected one value for %s, got %d", err.paramName, err.NumValues)
}

// ParameterName is an interface that is implemented by error types that are
// relevant to a specific parameter.
type ParameterError interface {
	error
	// ParamName is the name of the parameter that the error is referring to.
	ParamName() string
}

func (err UnescapedCookieParamError) ParamName() string  { return err.paramName }
func (err UnmarshalingParamError) ParamName() string     { return err.paramName }
func (err RequiredParamError) ParamName() string         { return err.paramName }
func (err RequiredHeaderError) ParamName() string        { return err.paramName }
func (err InvalidParamFormatError) ParamName() string    { return err.paramName }
func (err TooManyValuesForParamError) ParamName() string { return err.paramName }

type ServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

type ServerOption func(*ServerOptions)

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface, opts ...ServerOption) http.Handler {
	options := &ServerOptions{
		BaseURL:    "/",
		BaseRouter: chi.NewRouter(),
		ErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
	}

	for _, f := range opts {
		f(options)
	}

	r := options.BaseRouter
	wrapper := ServerInterfaceWrapper{
		Handler:          si,
		ErrorHandlerFunc: options.ErrorHandlerFunc,
	}

	r.Route(options.BaseURL, func(r chi.Router) {
		r.Get("/", wrapper.ListClients)
		r.Post("/", wrapper.RegisterClient)
		r.Delete("/{client_id}", wrapper.DeleteClient)
		r.Get("/{client_id}", wrapper.GetClient)
		r.Put("/{client_id}", wrapper.UpdateClient)
		r.Post("/{client_id}/regenerate-secret", wrapper.RegenerateClientSecret)
	})
	return r
}

func WithRouter(r chi.Router) ServerOption {
	return func(s *ServerOptions) {
		s.BaseRouter = r
	}
}

func WithServerBaseURL(url string) ServerOption {
	return func(s *ServerOptions) {
		s.BaseURL = url
	}
}

func WithErrorHandler(handler func(w http.ResponseWriter, r *http.Request, err error)) ServerOption {
	return func(s *ServerOptions) {
		s.ErrorHandlerFunc = handler
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
