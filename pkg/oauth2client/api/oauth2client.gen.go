// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/discord-gophers/goapi-gen version v0.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"encoding/xml"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/discord-gophers/goapi-gen/runtime"
	openapi_types "github.com/discord-gophers/goapi-gen/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/go-chi/render"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for ClientRegistrationRequestClientType.
var (
	UnknownClientRegistrationRequestClientType = ClientRegistrationRequestClientType{}

	ClientRegistrationRequestClientTypeConfidential = ClientRegistrationRequestClientType{"confidential"}

	ClientRegistrationRequestClientTypePublic = ClientRegistrationRequestClientType{"public"}
)

// Defines values for ClientRegistrationRequestGrantTypes.
var (
	UnknownClientRegistrationRequestGrantTypes = ClientRegistrationRequestGrantTypes{}

	ClientRegistrationRequestGrantTypesAuthorizationCode = ClientRegistrationRequestGrantTypes{"authorization_code"}

	ClientRegistrationRequestGrantTypesClientCredentials = ClientRegistrationRequestGrantTypes{"client_credentials"}

	ClientRegistrationRequestGrantTypesImplicit = ClientRegistrationRequestGrantTypes{"implicit"}

	ClientRegistrationRequestGrantTypesRefreshToken = ClientRegistrationRequestGrantTypes{"refresh_token"}
)

// Defines values for ClientRegistrationRequestResponseTypes.
var (
	UnknownClientRegistrationRequestResponseTypes = ClientRegistrationRequestResponseTypes{}

	ClientRegistrationRequestResponseTypesCode = ClientRegistrationRequestResponseTypes{"code"}

	ClientRegistrationRequestResponseTypesIDToken = ClientRegistrationRequestResponseTypes{"id_token"}

	ClientRegistrationRequestResponseTypesToken = ClientRegistrationRequestResponseTypes{"token"}
)

// Defines values for ClientRegistrationRequestTokenEndpointAuthMethod.
var (
	UnknownClientRegistrationRequestTokenEndpointAuthMethod = ClientRegistrationRequestTokenEndpointAuthMethod{}

	ClientRegistrationRequestTokenEndpointAuthMethodClientSecretBasic = ClientRegistrationRequestTokenEndpointAuthMethod{"client_secret_basic"}

	ClientRegistrationRequestTokenEndpointAuthMethodClientSecretPost = ClientRegistrationRequestTokenEndpointAuthMethod{"client_secret_post"}

	ClientRegistrationRequestTokenEndpointAuthMethodNone = ClientRegistrationRequestTokenEndpointAuthMethod{"none"}
)

// Defines values for ClientRegistrationResponseClientType.
var (
	UnknownClientRegistrationResponseClientType = ClientRegistrationResponseClientType{}

	ClientRegistrationResponseClientTypeConfidential = ClientRegistrationResponseClientType{"confidential"}

	ClientRegistrationResponseClientTypePublic = ClientRegistrationResponseClientType{"public"}
)

// Defines values for ClientResponseClientType.
var (
	UnknownClientResponseClientType = ClientResponseClientType{}

	ClientResponseClientTypeConfidential = ClientResponseClientType{"confidential"}

	ClientResponseClientTypePublic = ClientResponseClientType{"public"}
)

// Defines values for ClientUpdateRequestClientType.
var (
	UnknownClientUpdateRequestClientType = ClientUpdateRequestClientType{}

	ClientUpdateRequestClientTypeConfidential = ClientUpdateRequestClientType{"confidential"}

	ClientUpdateRequestClientTypePublic = ClientUpdateRequestClientType{"public"}
)

// Defines values for ClientUpdateRequestGrantTypes.
var (
	UnknownClientUpdateRequestGrantTypes = ClientUpdateRequestGrantTypes{}

	ClientUpdateRequestGrantTypesAuthorizationCode = ClientUpdateRequestGrantTypes{"authorization_code"}

	ClientUpdateRequestGrantTypesClientCredentials = ClientUpdateRequestGrantTypes{"client_credentials"}

	ClientUpdateRequestGrantTypesImplicit = ClientUpdateRequestGrantTypes{"implicit"}

	ClientUpdateRequestGrantTypesRefreshToken = ClientUpdateRequestGrantTypes{"refresh_token"}
)

// Defines values for ClientUpdateRequestResponseTypes.
var (
	UnknownClientUpdateRequestResponseTypes = ClientUpdateRequestResponseTypes{}

	ClientUpdateRequestResponseTypesCode = ClientUpdateRequestResponseTypes{"code"}

	ClientUpdateRequestResponseTypesIDToken = ClientUpdateRequestResponseTypes{"id_token"}

	ClientUpdateRequestResponseTypesToken = ClientUpdateRequestResponseTypes{"token"}
)

// Defines values for ClientUpdateRequestTokenEndpointAuthMethod.
var (
	UnknownClientUpdateRequestTokenEndpointAuthMethod = ClientUpdateRequestTokenEndpointAuthMethod{}

	ClientUpdateRequestTokenEndpointAuthMethodClientSecretBasic = ClientUpdateRequestTokenEndpointAuthMethod{"client_secret_basic"}

	ClientUpdateRequestTokenEndpointAuthMethodClientSecretPost = ClientUpdateRequestTokenEndpointAuthMethod{"client_secret_post"}

	ClientUpdateRequestTokenEndpointAuthMethodNone = ClientUpdateRequestTokenEndpointAuthMethod{"none"}
)

// ClientListResponse defines model for ClientListResponse.
type ClientListResponse struct {
	Clients []ClientResponse `json:"clients"`

	// Maximum number of clients returned
	Limit int `json:"limit"`

	// Number of clients skipped
	Offset int `json:"offset"`

	// Total number of clients
	Total int `json:"total"`
}

// ClientRegistrationRequest defines model for ClientRegistrationRequest.
type ClientRegistrationRequest struct {
	// Human-readable name of the client
	ClientName string `json:"client_name"`

	// Client type
	ClientType *ClientRegistrationRequestClientType `json:"client_type,omitempty"`

	// URL of the client's homepage
	ClientURI *string `json:"client_uri,omitempty"`

	// Array of contact email addresses
	Contacts []openapi_types.Email `json:"contacts,omitempty"`

	// Optional description of the client
	Description *string `json:"description,omitempty"`

	// Array of OAuth2 grant types
	GrantTypes []ClientRegistrationRequestGrantTypes `json:"grant_types,omitempty"`

	// URL of the client's JSON Web Key Set
	JwksURI *string `json:"jwks_uri,omitempty"`

	// URL of the client's logo
	LogoURI *string `json:"logo_uri,omitempty"`

	// URL of the client's privacy policy
	PolicyURI *string `json:"policy_uri,omitempty"`

	// Array of redirect URIs
	RedirectUris []string `json:"redirect_uris"`

	// Array of OAuth2 response types
	ResponseTypes []ClientRegistrationRequestResponseTypes `json:"response_types,omitempty"`

	// Space-separated list of scope values
	Scope *string `json:"scope,omitempty"`

	// Software identifier
	SoftwareID *string `json:"software_id,omitempty"`

	// Software version
	SoftwareVersion *string `json:"software_version,omitempty"`

	// Authentication method for token endpoint
	TokenEndpointAuthMethod *ClientRegistrationRequestTokenEndpointAuthMethod `json:"token_endpoint_auth_method,omitempty"`

	// URL of the client's terms of service
	TosURI *string `json:"tos_uri,omitempty"`
}

// ClientRegistrationResponse defines model for ClientRegistrationResponse.
type ClientRegistrationResponse struct {
	// The client identifier
	ClientID string `json:"client_id"`

	// Human-readable name of the client
	ClientName string `json:"client_name"`

	// The client secret (only returned on creation)
	ClientSecret *string `json:"client_secret,omitempty"`

	// Client type
	ClientType ClientRegistrationResponseClientType `json:"client_type"`

	// URL of the client's homepage
	ClientURI *string `json:"client_uri,omitempty"`

	// Array of contact email addresses
	Contacts []openapi_types.Email `json:"contacts,omitempty"`

	// Client creation timestamp
	CreatedAt time.Time `json:"created_at"`

	// Optional description of the client
	Description *string `json:"description,omitempty"`

	// Array of OAuth2 grant types
	GrantTypes []string `json:"grant_types"`

	// Whether the client is active
	IsActive bool `json:"is_active"`

	// URL of the client's JSON Web Key Set
	JwksURI *string `json:"jwks_uri,omitempty"`

	// URL of the client's logo
	LogoURI *string `json:"logo_uri,omitempty"`

	// URL of the client's privacy policy
	PolicyURI *string `json:"policy_uri,omitempty"`

	// Array of redirect URIs
	RedirectUris []string `json:"redirect_uris"`

	// Array of OAuth2 response types
	ResponseTypes []string `json:"response_types"`

	// Space-separated list of scope values
	Scope *string `json:"scope,omitempty"`

	// Software identifier
	SoftwareID *string `json:"software_id,omitempty"`

	// Software version
	SoftwareVersion *string `json:"software_version,omitempty"`

	// Authentication method for token endpoint
	TokenEndpointAuthMethod *string `json:"token_endpoint_auth_method,omitempty"`

	// URL of the client's terms of service
	TosURI *string `json:"tos_uri,omitempty"`

	// Client last update timestamp
	UpdatedAt time.Time `json:"updated_at"`
}

// ClientResponse defines model for ClientResponse.
type ClientResponse struct {
	// The client identifier
	ClientID string `json:"client_id"`

	// Human-readable name of the client
	ClientName string `json:"client_name"`

	// Client type
	ClientType ClientResponseClientType `json:"client_type"`

	// URL of the client's homepage
	ClientURI *string `json:"client_uri,omitempty"`

	// Array of contact email addresses
	Contacts []openapi_types.Email `json:"contacts,omitempty"`

	// Client creation timestamp
	CreatedAt time.Time `json:"created_at"`

	// Optional description of the client
	Description *string `json:"description,omitempty"`

	// Array of OAuth2 grant types
	GrantTypes []string `json:"grant_types"`

	// Whether the client is active
	IsActive bool `json:"is_active"`

	// URL of the client's JSON Web Key Set
	JwksURI *string `json:"jwks_uri,omitempty"`

	// Last time client was used for authentication
	LastUsedAt *time.Time `json:"last_used_at,omitempty"`

	// URL of the client's logo
	LogoURI *string `json:"logo_uri,omitempty"`

	// URL of the client's privacy policy
	PolicyURI *string `json:"policy_uri,omitempty"`

	// Array of redirect URIs
	RedirectUris []string `json:"redirect_uris"`

	// Array of OAuth2 response types
	ResponseTypes []string `json:"response_types"`

	// Space-separated list of scope values
	Scope *string `json:"scope,omitempty"`

	// Software identifier
	SoftwareID *string `json:"software_id,omitempty"`

	// Software version
	SoftwareVersion *string `json:"software_version,omitempty"`

	// Authentication method for token endpoint
	TokenEndpointAuthMethod *string `json:"token_endpoint_auth_method,omitempty"`

	// URL of the client's terms of service
	TosURI *string `json:"tos_uri,omitempty"`

	// Client last update timestamp
	UpdatedAt time.Time `json:"updated_at"`
}

// ClientSecretResponse defines model for ClientSecretResponse.
type ClientSecretResponse struct {
	// The client identifier
	ClientID string `json:"client_id"`

	// The new client secret
	ClientSecret string `json:"client_secret"`

	// Timestamp when secret was regenerated
	UpdatedAt time.Time `json:"updated_at"`
}

// ClientUpdateRequest defines model for ClientUpdateRequest.
type ClientUpdateRequest struct {
	// Human-readable name of the client
	ClientName *string `json:"client_name,omitempty"`

	// Client type
	ClientType *ClientUpdateRequestClientType `json:"client_type,omitempty"`

	// URL of the client's homepage
	ClientURI *string `json:"client_uri,omitempty"`

	// Array of contact email addresses
	Contacts []openapi_types.Email `json:"contacts,omitempty"`

	// Optional description of the client
	Description *string `json:"description,omitempty"`

	// Array of OAuth2 grant types
	GrantTypes []ClientUpdateRequestGrantTypes `json:"grant_types,omitempty"`

	// Whether the client is active
	IsActive *bool `json:"is_active,omitempty"`

	// URL of the client's JSON Web Key Set
	JwksURI *string `json:"jwks_uri,omitempty"`

	// URL of the client's logo
	LogoURI *string `json:"logo_uri,omitempty"`

	// URL of the client's privacy policy
	PolicyURI *string `json:"policy_uri,omitempty"`

	// Array of redirect URIs
	RedirectUris []string `json:"redirect_uris,omitempty"`

	// Array of OAuth2 response types
	ResponseTypes []ClientUpdateRequestResponseTypes `json:"response_types,omitempty"`

	// Space-separated list of scope values
	Scope *string `json:"scope,omitempty"`

	// Software identifier
	SoftwareID *string `json:"software_id,omitempty"`

	// Software version
	SoftwareVersion *string `json:"software_version,omitempty"`

	// Authentication method for token endpoint
	TokenEndpointAuthMethod *ClientUpdateRequestTokenEndpointAuthMethod `json:"token_endpoint_auth_method,omitempty"`

	// URL of the client's terms of service
	TosURI *string `json:"tos_uri,omitempty"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Error code
	Error string `json:"error"`

	// Human-readable error description
	ErrorDescription string `json:"error_description"`

	// URI to error documentation
	ErrorURI *string `json:"error_uri,omitempty"`
}

// Client type
type ClientRegistrationRequestClientType struct {
	value string
}

func (t *ClientRegistrationRequestClientType) ToValue() string {
	return t.value
}
func (t ClientRegistrationRequestClientType) MarshalJSON() ([]byte, error) {
	return json.Marshal(t.value)
}
func (t *ClientRegistrationRequestClientType) UnmarshalJSON(data []byte) error {
	var value string
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	return t.FromValue(value)
}
func (t *ClientRegistrationRequestClientType) FromValue(value string) error {
	switch value {

	case ClientRegistrationRequestClientTypeConfidential.value:
		t.value = value
		return nil

	case ClientRegistrationRequestClientTypePublic.value:
		t.value = value
		return nil

	}
	return fmt.Errorf("unknown enum value: %v", value)
}

// ClientRegistrationRequestGrantTypes defines model for ClientRegistrationRequest.GrantTypes.
type ClientRegistrationRequestGrantTypes struct {
	value string
}

func (t *ClientRegistrationRequestGrantTypes) ToValue() string {
	return t.value
}
func (t ClientRegistrationRequestGrantTypes) MarshalJSON() ([]byte, error) {
	return json.Marshal(t.value)
}
func (t *ClientRegistrationRequestGrantTypes) UnmarshalJSON(data []byte) error {
	var value string
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	return t.FromValue(value)
}
func (t *ClientRegistrationRequestGrantTypes) FromValue(value string) error {
	switch value {

	case ClientRegistrationRequestGrantTypesAuthorizationCode.value:
		t.value = value
		return nil

	case ClientRegistrationRequestGrantTypesClientCredentials.value:
		t.value = value
		return nil

	case ClientRegistrationRequestGrantTypesImplicit.value:
		t.value = value
		return nil

	case ClientRegistrationRequestGrantTypesRefreshToken.value:
		t.value = value
		return nil

	}
	return fmt.Errorf("unknown enum value: %v", value)
}

// ClientRegistrationRequestResponseTypes defines model for ClientRegistrationRequest.ResponseTypes.
type ClientRegistrationRequestResponseTypes struct {
	value string
}

func (t *ClientRegistrationRequestResponseTypes) ToValue() string {
	return t.value
}
func (t ClientRegistrationRequestResponseTypes) MarshalJSON() ([]byte, error) {
	return json.Marshal(t.value)
}
func (t *ClientRegistrationRequestResponseTypes) UnmarshalJSON(data []byte) error {
	var value string
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	return t.FromValue(value)
}
func (t *ClientRegistrationRequestResponseTypes) FromValue(value string) error {
	switch value {

	case ClientRegistrationRequestResponseTypesCode.value:
		t.value = value
		return nil

	case ClientRegistrationRequestResponseTypesIDToken.value:
		t.value = value
		return nil

	case ClientRegistrationRequestResponseTypesToken.value:
		t.value = value
		return nil

	}
	return fmt.Errorf("unknown enum value: %v", value)
}

// Authentication method for token endpoint
type ClientRegistrationRequestTokenEndpointAuthMethod struct {
	value string
}

func (t *ClientRegistrationRequestTokenEndpointAuthMethod) ToValue() string {
	return t.value
}
func (t ClientRegistrationRequestTokenEndpointAuthMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(t.value)
}
func (t *ClientRegistrationRequestTokenEndpointAuthMethod) UnmarshalJSON(data []byte) error {
	var value string
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	return t.FromValue(value)
}
func (t *ClientRegistrationRequestTokenEndpointAuthMethod) FromValue(value string) error {
	switch value {

	case ClientRegistrationRequestTokenEndpointAuthMethodClientSecretBasic.value:
		t.value = value
		return nil

	case ClientRegistrationRequestTokenEndpointAuthMethodClientSecretPost.value:
		t.value = value
		return nil

	case ClientRegistrationRequestTokenEndpointAuthMethodNone.value:
		t.value = value
		return nil

	}
	return fmt.Errorf("unknown enum value: %v", value)
}

// Client type
type ClientRegistrationResponseClientType struct {
	value string
}

func (t *ClientRegistrationResponseClientType) ToValue() string {
	return t.value
}
func (t ClientRegistrationResponseClientType) MarshalJSON() ([]byte, error) {
	return json.Marshal(t.value)
}
func (t *ClientRegistrationResponseClientType) UnmarshalJSON(data []byte) error {
	var value string
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	return t.FromValue(value)
}
func (t *ClientRegistrationResponseClientType) FromValue(value string) error {
	switch value {

	case ClientRegistrationResponseClientTypeConfidential.value:
		t.value = value
		return nil

	case ClientRegistrationResponseClientTypePublic.value:
		t.value = value
		return nil

	}
	return fmt.Errorf("unknown enum value: %v", value)
}

// Client type
type ClientResponseClientType struct {
	value string
}

func (t *ClientResponseClientType) ToValue() string {
	return t.value
}
func (t ClientResponseClientType) MarshalJSON() ([]byte, error) {
	return json.Marshal(t.value)
}
func (t *ClientResponseClientType) UnmarshalJSON(data []byte) error {
	var value string
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	return t.FromValue(value)
}
func (t *ClientResponseClientType) FromValue(value string) error {
	switch value {

	case ClientResponseClientTypeConfidential.value:
		t.value = value
		return nil

	case ClientResponseClientTypePublic.value:
		t.value = value
		return nil

	}
	return fmt.Errorf("unknown enum value: %v", value)
}

// Client type
type ClientUpdateRequestClientType struct {
	value string
}

func (t *ClientUpdateRequestClientType) ToValue() string {
	return t.value
}
func (t ClientUpdateRequestClientType) MarshalJSON() ([]byte, error) {
	return json.Marshal(t.value)
}
func (t *ClientUpdateRequestClientType) UnmarshalJSON(data []byte) error {
	var value string
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	return t.FromValue(value)
}
func (t *ClientUpdateRequestClientType) FromValue(value string) error {
	switch value {

	case ClientUpdateRequestClientTypeConfidential.value:
		t.value = value
		return nil

	case ClientUpdateRequestClientTypePublic.value:
		t.value = value
		return nil

	}
	return fmt.Errorf("unknown enum value: %v", value)
}

// ClientUpdateRequestGrantTypes defines model for ClientUpdateRequest.GrantTypes.
type ClientUpdateRequestGrantTypes struct {
	value string
}

func (t *ClientUpdateRequestGrantTypes) ToValue() string {
	return t.value
}
func (t ClientUpdateRequestGrantTypes) MarshalJSON() ([]byte, error) {
	return json.Marshal(t.value)
}
func (t *ClientUpdateRequestGrantTypes) UnmarshalJSON(data []byte) error {
	var value string
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	return t.FromValue(value)
}
func (t *ClientUpdateRequestGrantTypes) FromValue(value string) error {
	switch value {

	case ClientUpdateRequestGrantTypesAuthorizationCode.value:
		t.value = value
		return nil

	case ClientUpdateRequestGrantTypesClientCredentials.value:
		t.value = value
		return nil

	case ClientUpdateRequestGrantTypesImplicit.value:
		t.value = value
		return nil

	case ClientUpdateRequestGrantTypesRefreshToken.value:
		t.value = value
		return nil

	}
	return fmt.Errorf("unknown enum value: %v", value)
}

// ClientUpdateRequestResponseTypes defines model for ClientUpdateRequest.ResponseTypes.
type ClientUpdateRequestResponseTypes struct {
	value string
}

func (t *ClientUpdateRequestResponseTypes) ToValue() string {
	return t.value
}
func (t ClientUpdateRequestResponseTypes) MarshalJSON() ([]byte, error) {
	return json.Marshal(t.value)
}
func (t *ClientUpdateRequestResponseTypes) UnmarshalJSON(data []byte) error {
	var value string
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	return t.FromValue(value)
}
func (t *ClientUpdateRequestResponseTypes) FromValue(value string) error {
	switch value {

	case ClientUpdateRequestResponseTypesCode.value:
		t.value = value
		return nil

	case ClientUpdateRequestResponseTypesIDToken.value:
		t.value = value
		return nil

	case ClientUpdateRequestResponseTypesToken.value:
		t.value = value
		return nil

	}
	return fmt.Errorf("unknown enum value: %v", value)
}

// Authentication method for token endpoint
type ClientUpdateRequestTokenEndpointAuthMethod struct {
	value string
}

func (t *ClientUpdateRequestTokenEndpointAuthMethod) ToValue() string {
	return t.value
}
func (t ClientUpdateRequestTokenEndpointAuthMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(t.value)
}
func (t *ClientUpdateRequestTokenEndpointAuthMethod) UnmarshalJSON(data []byte) error {
	var value string
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	return t.FromValue(value)
}
func (t *ClientUpdateRequestTokenEndpointAuthMethod) FromValue(value string) error {
	switch value {

	case ClientUpdateRequestTokenEndpointAuthMethodClientSecretBasic.value:
		t.value = value
		return nil

	case ClientUpdateRequestTokenEndpointAuthMethodClientSecretPost.value:
		t.value = value
		return nil

	case ClientUpdateRequestTokenEndpointAuthMethodNone.value:
		t.value = value
		return nil

	}
	return fmt.Errorf("unknown enum value: %v", value)
}

// ListClientsParams defines parameters for ListClients.
type ListClientsParams struct {
	// Maximum number of clients to return
	Limit *int `json:"limit,omitempty"`

	// Number of clients to skip
	Offset *int `json:"offset,omitempty"`

	// Filter by client type
	ClientType *ListClientsParamsClientType `json:"client_type,omitempty"`

	// Filter by active status
	IsActive *bool `json:"is_active,omitempty"`
}

// ListClientsParamsClientType defines parameters for ListClients.
type ListClientsParamsClientType string

// RegisterClientJSONBody defines parameters for RegisterClient.
type RegisterClientJSONBody ClientRegistrationRequest

// UpdateClientJSONBody defines parameters for UpdateClient.
type UpdateClientJSONBody ClientUpdateRequest

// RegisterClientJSONRequestBody defines body for RegisterClient for application/json ContentType.
type RegisterClientJSONRequestBody RegisterClientJSONBody

// Bind implements render.Binder.
func (RegisterClientJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// UpdateClientJSONRequestBody defines body for UpdateClient for application/json ContentType.
type UpdateClientJSONRequestBody UpdateClientJSONBody

// Bind implements render.Binder.
func (UpdateClientJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// Response is a common response struct for all the API calls.
// A Response object may be instantiated via functions for specific operation responses.
// It may also be instantiated directly, for the purpose of responding with a single status code.
type Response struct {
	body        interface{}
	Code        int
	contentType string
}

// Render implements the render.Renderer interface. It sets the Content-Type header
// and status code based on the response definition.
func (resp *Response) Render(w http.ResponseWriter, r *http.Request) error {
	w.Header().Set("Content-Type", resp.contentType)
	render.Status(r, resp.Code)
	return nil
}

// Status is a builder method to override the default status code for a response.
func (resp *Response) Status(code int) *Response {
	resp.Code = code
	return resp
}

// ContentType is a builder method to override the default content type for a response.
func (resp *Response) ContentType(contentType string) *Response {
	resp.contentType = contentType
	return resp
}

// MarshalJSON implements the json.Marshaler interface.
// This is used to only marshal the body of the response.
func (resp *Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(resp.body)
}

// MarshalXML implements the xml.Marshaler interface.
// This is used to only marshal the body of the response.
func (resp *Response) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return e.Encode(resp.body)
}

// ListClientsJSON200Response is a constructor method for a ListClients response.
// A *Response is returned with the configured status code and content type from the spec.
func ListClientsJSON200Response(body ClientListResponse) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// ListClientsJSON401Response is a constructor method for a ListClients response.
// A *Response is returned with the configured status code and content type from the spec.
func ListClientsJSON401Response(body ErrorResponse) *Response {
	return &Response{
		body:        body,
		Code:        401,
		contentType: "application/json",
	}
}

// ListClientsJSON403Response is a constructor method for a ListClients response.
// A *Response is returned with the configured status code and content type from the spec.
func ListClientsJSON403Response(body ErrorResponse) *Response {
	return &Response{
		body:        body,
		Code:        403,
		contentType: "application/json",
	}
}

// RegisterClientJSON201Response is a constructor method for a RegisterClient response.
// A *Response is returned with the configured status code and content type from the spec.
func RegisterClientJSON201Response(body ClientRegistrationResponse) *Response {
	return &Response{
		body:        body,
		Code:        201,
		contentType: "application/json",
	}
}

// RegisterClientJSON400Response is a constructor method for a RegisterClient response.
// A *Response is returned with the configured status code and content type from the spec.
func RegisterClientJSON400Response(body ErrorResponse) *Response {
	return &Response{
		body:        body,
		Code:        400,
		contentType: "application/json",
	}
}

// RegisterClientJSON401Response is a constructor method for a RegisterClient response.
// A *Response is returned with the configured status code and content type from the spec.
func RegisterClientJSON401Response(body ErrorResponse) *Response {
	return &Response{
		body:        body,
		Code:        401,
		contentType: "application/json",
	}
}

// RegisterClientJSON403Response is a constructor method for a RegisterClient response.
// A *Response is returned with the configured status code and content type from the spec.
func RegisterClientJSON403Response(body ErrorResponse) *Response {
	return &Response{
		body:        body,
		Code:        403,
		contentType: "application/json",
	}
}

// DeleteClientJSON401Response is a constructor method for a DeleteClient response.
// A *Response is returned with the configured status code and content type from the spec.
func DeleteClientJSON401Response(body ErrorResponse) *Response {
	return &Response{
		body:        body,
		Code:        401,
		contentType: "application/json",
	}
}

// DeleteClientJSON403Response is a constructor method for a DeleteClient response.
// A *Response is returned with the configured status code and content type from the spec.
func DeleteClientJSON403Response(body ErrorResponse) *Response {
	return &Response{
		body:        body,
		Code:        403,
		contentType: "application/json",
	}
}

// DeleteClientJSON404Response is a constructor method for a DeleteClient response.
// A *Response is returned with the configured status code and content type from the spec.
func DeleteClientJSON404Response(body ErrorResponse) *Response {
	return &Response{
		body:        body,
		Code:        404,
		contentType: "application/json",
	}
}

// GetClientJSON200Response is a constructor method for a GetClient response.
// A *Response is returned with the configured status code and content type from the spec.
func GetClientJSON200Response(body ClientResponse) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// GetClientJSON401Response is a constructor method for a GetClient response.
// A *Response is returned with the configured status code and content type from the spec.
func GetClientJSON401Response(body ErrorResponse) *Response {
	return &Response{
		body:        body,
		Code:        401,
		contentType: "application/json",
	}
}

// GetClientJSON403Response is a constructor method for a GetClient response.
// A *Response is returned with the configured status code and content type from the spec.
func GetClientJSON403Response(body ErrorResponse) *Response {
	return &Response{
		body:        body,
		Code:        403,
		contentType: "application/json",
	}
}

// GetClientJSON404Response is a constructor method for a GetClient response.
// A *Response is returned with the configured status code and content type from the spec.
func GetClientJSON404Response(body ErrorResponse) *Response {
	return &Response{
		body:        body,
		Code:        404,
		contentType: "application/json",
	}
}

// UpdateClientJSON200Response is a constructor method for a UpdateClient response.
// A *Response is returned with the configured status code and content type from the spec.
func UpdateClientJSON200Response(body ClientResponse) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// UpdateClientJSON400Response is a constructor method for a UpdateClient response.
// A *Response is returned with the configured status code and content type from the spec.
func UpdateClientJSON400Response(body ErrorResponse) *Response {
	return &Response{
		body:        body,
		Code:        400,
		contentType: "application/json",
	}
}

// UpdateClientJSON401Response is a constructor method for a UpdateClient response.
// A *Response is returned with the configured status code and content type from the spec.
func UpdateClientJSON401Response(body ErrorResponse) *Response {
	return &Response{
		body:        body,
		Code:        401,
		contentType: "application/json",
	}
}

// UpdateClientJSON403Response is a constructor method for a UpdateClient response.
// A *Response is returned with the configured status code and content type from the spec.
func UpdateClientJSON403Response(body ErrorResponse) *Response {
	return &Response{
		body:        body,
		Code:        403,
		contentType: "application/json",
	}
}

// UpdateClientJSON404Response is a constructor method for a UpdateClient response.
// A *Response is returned with the configured status code and content type from the spec.
func UpdateClientJSON404Response(body ErrorResponse) *Response {
	return &Response{
		body:        body,
		Code:        404,
		contentType: "application/json",
	}
}

// RegenerateClientSecretJSON200Response is a constructor method for a RegenerateClientSecret response.
// A *Response is returned with the configured status code and content type from the spec.
func RegenerateClientSecretJSON200Response(body ClientSecretResponse) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// RegenerateClientSecretJSON401Response is a constructor method for a RegenerateClientSecret response.
// A *Response is returned with the configured status code and content type from the spec.
func RegenerateClientSecretJSON401Response(body ErrorResponse) *Response {
	return &Response{
		body:        body,
		Code:        401,
		contentType: "application/json",
	}
}

// RegenerateClientSecretJSON403Response is a constructor method for a RegenerateClientSecret response.
// A *Response is returned with the configured status code and content type from the spec.
func RegenerateClientSecretJSON403Response(body ErrorResponse) *Response {
	return &Response{
		body:        body,
		Code:        403,
		contentType: "application/json",
	}
}

// RegenerateClientSecretJSON404Response is a constructor method for a RegenerateClientSecret response.
// A *Response is returned with the configured status code and content type from the spec.
func RegenerateClientSecretJSON404Response(body ErrorResponse) *Response {
	return &Response{
		body:        body,
		Code:        404,
		contentType: "application/json",
	}
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List OAuth2 Clients
	// (GET /)
	ListClients(w http.ResponseWriter, r *http.Request, params ListClientsParams) *Response
	// Register OAuth2 Client
	// (POST /)
	RegisterClient(w http.ResponseWriter, r *http.Request) *Response
	// Delete OAuth2 Client
	// (DELETE /{client_id})
	DeleteClient(w http.ResponseWriter, r *http.Request, clientID string) *Response
	// Get OAuth2 Client
	// (GET /{client_id})
	GetClient(w http.ResponseWriter, r *http.Request, clientID string) *Response
	// Update OAuth2 Client
	// (PUT /{client_id})
	UpdateClient(w http.ResponseWriter, r *http.Request, clientID string) *Response
	// Regenerate Client Secret
	// (POST /{client_id}/regenerate-secret)
	RegenerateClientSecret(w http.ResponseWriter, r *http.Request, clientID string) *Response
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler          ServerInterface
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// ListClients operation middleware
func (siw *ServerInterfaceWrapper) ListClients(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListClientsParams

	// ------------- Optional query parameter "limit" -------------

	if err := runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit); err != nil {
		err = fmt.Errorf("invalid format for parameter limit: %w", err)
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "limit"})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	if err := runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset); err != nil {
		err = fmt.Errorf("invalid format for parameter offset: %w", err)
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "offset"})
		return
	}

	// ------------- Optional query parameter "client_type" -------------

	if err := runtime.BindQueryParameter("form", true, false, "client_type", r.URL.Query(), &params.ClientType); err != nil {
		err = fmt.Errorf("invalid format for parameter client_type: %w", err)
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "client_type"})
		return
	}

	// ------------- Optional query parameter "is_active" -------------

	if err := runtime.BindQueryParameter("form", true, false, "is_active", r.URL.Query(), &params.IsActive); err != nil {
		err = fmt.Errorf("invalid format for parameter is_active: %w", err)
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "is_active"})
		return
	}

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.ListClients(w, r, params)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// RegisterClient operation middleware
func (siw *ServerInterfaceWrapper) RegisterClient(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.RegisterClient(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// DeleteClient operation middleware
func (siw *ServerInterfaceWrapper) DeleteClient(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Path parameter "client_id" -------------
	var clientID string

	if err := runtime.BindStyledParameter("simple", false, "client_id", chi.URLParam(r, "client_id"), &clientID); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "client_id"})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.DeleteClient(w, r, clientID)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// GetClient operation middleware
func (siw *ServerInterfaceWrapper) GetClient(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Path parameter "client_id" -------------
	var clientID string

	if err := runtime.BindStyledParameter("simple", false, "client_id", chi.URLParam(r, "client_id"), &clientID); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "client_id"})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.GetClient(w, r, clientID)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// UpdateClient operation middleware
func (siw *ServerInterfaceWrapper) UpdateClient(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Path parameter "client_id" -------------
	var clientID string

	if err := runtime.BindStyledParameter("simple", false, "client_id", chi.URLParam(r, "client_id"), &clientID); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "client_id"})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.UpdateClient(w, r, clientID)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// RegenerateClientSecret operation middleware
func (siw *ServerInterfaceWrapper) RegenerateClientSecret(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Path parameter "client_id" -------------
	var clientID string

	if err := runtime.BindStyledParameter("simple", false, "client_id", chi.URLParam(r, "client_id"), &clientID); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "client_id"})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.RegenerateClientSecret(w, r, clientID)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	err       error
	paramName string
}

// Error implements error.
func (err UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter %s: %v", err.paramName, err.err)
}

func (err UnescapedCookieParamError) Unwrap() error { return err.err }

type UnmarshalingParamError struct {
	err       error
	paramName string
}

// Error implements error.
func (err UnmarshalingParamError) Error() string {
	return fmt.Sprintf("error unmarshaling parameter %s as JSON: %v", err.paramName, err.err)
}

func (err UnmarshalingParamError) Unwrap() error { return err.err }

type RequiredParamError struct {
	err       error
	paramName string
}

// Error implements error.
func (err RequiredParamError) Error() string {
	if err.err == nil {
		return fmt.Sprintf("query parameter %s is required, but not found", err.paramName)
	} else {
		return fmt.Sprintf("query parameter %s is required, but errored: %s", err.paramName, err.err)
	}
}

func (err RequiredParamError) Unwrap() error { return err.err }

type RequiredHeaderError struct {
	paramName string
}

// Error implements error.
func (err RequiredHeaderError) Error() string {
	return fmt.Sprintf("header parameter %s is required, but not found", err.paramName)
}

type InvalidParamFormatError struct {
	err       error
	paramName string
}

// Error implements error.
func (err InvalidParamFormatError) Error() string {
	return fmt.Sprintf("invalid format for parameter %s: %v", err.paramName, err.err)
}

func (err InvalidParamFormatError) Unwrap() error { return err.err }

type TooManyValuesForParamError struct {
	NumValues int
	paramName string
}

// Error implements error.
func (err TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("expected one value for %s, got %d", err.paramName, err.NumValues)
}

// ParameterName is an interface that is implemented by error types that are
// relevant to a specific parameter.
type ParameterError interface {
	error
	// ParamName is the name of the parameter that the error is referring to.
	ParamName() string
}

func (err UnescapedCookieParamError) ParamName() string  { return err.paramName }
func (err UnmarshalingParamError) ParamName() string     { return err.paramName }
func (err RequiredParamError) ParamName() string         { return err.paramName }
func (err RequiredHeaderError) ParamName() string        { return err.paramName }
func (err InvalidParamFormatError) ParamName() string    { return err.paramName }
func (err TooManyValuesForParamError) ParamName() string { return err.paramName }

type ServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

type ServerOption func(*ServerOptions)

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface, opts ...ServerOption) http.Handler {
	options := &ServerOptions{
		BaseURL:    "/",
		BaseRouter: chi.NewRouter(),
		ErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
	}

	for _, f := range opts {
		f(options)
	}

	r := options.BaseRouter
	wrapper := ServerInterfaceWrapper{
		Handler:          si,
		ErrorHandlerFunc: options.ErrorHandlerFunc,
	}

	r.Route(options.BaseURL, func(r chi.Router) {
		r.Get("/", wrapper.ListClients)
		r.Post("/", wrapper.RegisterClient)
		r.Delete("/{client_id}", wrapper.DeleteClient)
		r.Get("/{client_id}", wrapper.GetClient)
		r.Put("/{client_id}", wrapper.UpdateClient)
		r.Post("/{client_id}/regenerate-secret", wrapper.RegenerateClientSecret)
	})
	return r
}

func WithRouter(r chi.Router) ServerOption {
	return func(s *ServerOptions) {
		s.BaseRouter = r
	}
}

func WithServerBaseURL(url string) ServerOption {
	return func(s *ServerOptions) {
		s.BaseURL = url
	}
}

func WithErrorHandler(handler func(w http.ResponseWriter, r *http.Request, err error)) ServerOption {
	return func(s *ServerOptions) {
		s.ErrorHandlerFunc = handler
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
