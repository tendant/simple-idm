// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/discord-gophers/goapi-gen version v0.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"encoding/xml"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/discord-gophers/goapi-gen/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/go-chi/render"
)

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Error code
	Error string `json:"error"`

	// Human-readable error description
	ErrorDescription *string `json:"error_description,omitempty"`

	// URI to error documentation
	ErrorURI *string `json:"error_uri,omitempty"`
}

// JWK defines model for JWK.
type JWK struct {
	// Algorithm
	Alg *string `json:"alg,omitempty"`

	// RSA public key exponent (base64url encoded)
	E *string `json:"e,omitempty"`

	// RSA public key modulus (base64url encoded)
	False *string `json:"false,omitempty"`

	// Key ID
	Kid *string `json:"kid,omitempty"`

	// Key type
	Kty *string `json:"kty,omitempty"`

	// Public key use
	Use *string `json:"use,omitempty"`
}

// JWKSResponse defines model for JWKSResponse.
type JWKSResponse struct {
	// Array of JSON Web Keys
	Keys []JWK `json:"keys"`
}

// TokenResponse defines model for TokenResponse.
type TokenResponse struct {
	// The access token
	AccessToken string `json:"access_token"`

	// Token lifetime in seconds
	ExpiresIn int `json:"expires_in"`

	// The refresh token (optional)
	RefreshToken *string `json:"refresh_token,omitempty"`

	// The granted scopes
	Scope *string `json:"scope,omitempty"`

	// The token type
	TokenType string `json:"token_type"`
}

// AuthorizeParams defines parameters for Authorize.
type AuthorizeParams struct {
	// The client identifier
	ClientID string `json:"client_id"`

	// The client's redirect URI
	RedirectURI string `json:"redirect_uri"`

	// The desired response type
	ResponseType AuthorizeParamsResponseType `json:"response_type"`

	// The requested scopes
	Scope *string `json:"scope,omitempty"`

	// An opaque value used to maintain state between request and callback
	State *string `json:"state,omitempty"`

	// PKCE code challenge (RFC 7636)
	CodeChallenge *string `json:"code_challenge,omitempty"`

	// PKCE code challenge method (RFC 7636)
	CodeChallengeMethod *AuthorizeParamsCodeChallengeMethod `json:"code_challenge_method,omitempty"`
}

// AuthorizeParamsResponseType defines parameters for Authorize.
type AuthorizeParamsResponseType string

// AuthorizeParamsCodeChallengeMethod defines parameters for Authorize.
type AuthorizeParamsCodeChallengeMethod string

// Response is a common response struct for all the API calls.
// A Response object may be instantiated via functions for specific operation responses.
// It may also be instantiated directly, for the purpose of responding with a single status code.
type Response struct {
	body        interface{}
	Code        int
	contentType string
}

// Render implements the render.Renderer interface. It sets the Content-Type header
// and status code based on the response definition.
func (resp *Response) Render(w http.ResponseWriter, r *http.Request) error {
	w.Header().Set("Content-Type", resp.contentType)
	render.Status(r, resp.Code)
	return nil
}

// Status is a builder method to override the default status code for a response.
func (resp *Response) Status(code int) *Response {
	resp.Code = code
	return resp
}

// ContentType is a builder method to override the default content type for a response.
func (resp *Response) ContentType(contentType string) *Response {
	resp.contentType = contentType
	return resp
}

// MarshalJSON implements the json.Marshaler interface.
// This is used to only marshal the body of the response.
func (resp *Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(resp.body)
}

// MarshalXML implements the xml.Marshaler interface.
// This is used to only marshal the body of the response.
func (resp *Response) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return e.Encode(resp.body)
}

// AuthorizeJSON400Response is a constructor method for a Authorize response.
// A *Response is returned with the configured status code and content type from the spec.
func AuthorizeJSON400Response(body struct {
	Error            *string `json:"error,omitempty"`
	ErrorDescription *string `json:"error_description,omitempty"`
}) *Response {
	return &Response{
		body:        body,
		Code:        400,
		contentType: "application/json",
	}
}

// AuthorizeJSON401Response is a constructor method for a Authorize response.
// A *Response is returned with the configured status code and content type from the spec.
func AuthorizeJSON401Response(body struct {
	Error            *string `json:"error,omitempty"`
	ErrorDescription *string `json:"error_description,omitempty"`
}) *Response {
	return &Response{
		body:        body,
		Code:        401,
		contentType: "application/json",
	}
}

// JwksJSON200Response is a constructor method for a Jwks response.
// A *Response is returned with the configured status code and content type from the spec.
func JwksJSON200Response(body JWKSResponse) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// JwksJSON500Response is a constructor method for a Jwks response.
// A *Response is returned with the configured status code and content type from the spec.
func JwksJSON500Response(body ErrorResponse) *Response {
	return &Response{
		body:        body,
		Code:        500,
		contentType: "application/json",
	}
}

// TokenJSON200Response is a constructor method for a Token response.
// A *Response is returned with the configured status code and content type from the spec.
func TokenJSON200Response(body TokenResponse) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// TokenJSON400Response is a constructor method for a Token response.
// A *Response is returned with the configured status code and content type from the spec.
func TokenJSON400Response(body ErrorResponse) *Response {
	return &Response{
		body:        body,
		Code:        400,
		contentType: "application/json",
	}
}

// TokenJSON401Response is a constructor method for a Token response.
// A *Response is returned with the configured status code and content type from the spec.
func TokenJSON401Response(body ErrorResponse) *Response {
	return &Response{
		body:        body,
		Code:        401,
		contentType: "application/json",
	}
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// OAuth2 Authorization Endpoint
	// (GET /authorize)
	Authorize(w http.ResponseWriter, r *http.Request, params AuthorizeParams) *Response
	// JSON Web Key Set Endpoint
	// (GET /jwks)
	Jwks(w http.ResponseWriter, r *http.Request) *Response
	// OAuth2 Token Endpoint
	// (POST /token)
	Token(w http.ResponseWriter, r *http.Request) *Response
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler          ServerInterface
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// Authorize operation middleware
func (siw *ServerInterfaceWrapper) Authorize(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// Parameter object where we will unmarshal all parameters from the context
	var params AuthorizeParams

	// ------------- Required query parameter "client_id" -------------

	if err := runtime.BindQueryParameter("form", true, true, "client_id", r.URL.Query(), &params.ClientID); err != nil {
		err = fmt.Errorf("invalid format for parameter client_id: %w", err)
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{err, "client_id"})
		return
	}

	// ------------- Required query parameter "redirect_uri" -------------

	if err := runtime.BindQueryParameter("form", true, true, "redirect_uri", r.URL.Query(), &params.RedirectURI); err != nil {
		err = fmt.Errorf("invalid format for parameter redirect_uri: %w", err)
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{err, "redirect_uri"})
		return
	}

	// ------------- Required query parameter "response_type" -------------

	if err := runtime.BindQueryParameter("form", true, true, "response_type", r.URL.Query(), &params.ResponseType); err != nil {
		err = fmt.Errorf("invalid format for parameter response_type: %w", err)
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{err, "response_type"})
		return
	}

	// ------------- Optional query parameter "scope" -------------

	if err := runtime.BindQueryParameter("form", true, false, "scope", r.URL.Query(), &params.Scope); err != nil {
		err = fmt.Errorf("invalid format for parameter scope: %w", err)
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "scope"})
		return
	}

	// ------------- Optional query parameter "state" -------------

	if err := runtime.BindQueryParameter("form", true, false, "state", r.URL.Query(), &params.State); err != nil {
		err = fmt.Errorf("invalid format for parameter state: %w", err)
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "state"})
		return
	}

	// ------------- Optional query parameter "code_challenge" -------------

	if err := runtime.BindQueryParameter("form", true, false, "code_challenge", r.URL.Query(), &params.CodeChallenge); err != nil {
		err = fmt.Errorf("invalid format for parameter code_challenge: %w", err)
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "code_challenge"})
		return
	}

	// ------------- Optional query parameter "code_challenge_method" -------------

	if err := runtime.BindQueryParameter("form", true, false, "code_challenge_method", r.URL.Query(), &params.CodeChallengeMethod); err != nil {
		err = fmt.Errorf("invalid format for parameter code_challenge_method: %w", err)
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "code_challenge_method"})
		return
	}

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.Authorize(w, r, params)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// Jwks operation middleware
func (siw *ServerInterfaceWrapper) Jwks(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.Jwks(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// Token operation middleware
func (siw *ServerInterfaceWrapper) Token(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.Token(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	err       error
	paramName string
}

// Error implements error.
func (err UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter %s: %v", err.paramName, err.err)
}

func (err UnescapedCookieParamError) Unwrap() error { return err.err }

type UnmarshalingParamError struct {
	err       error
	paramName string
}

// Error implements error.
func (err UnmarshalingParamError) Error() string {
	return fmt.Sprintf("error unmarshaling parameter %s as JSON: %v", err.paramName, err.err)
}

func (err UnmarshalingParamError) Unwrap() error { return err.err }

type RequiredParamError struct {
	err       error
	paramName string
}

// Error implements error.
func (err RequiredParamError) Error() string {
	if err.err == nil {
		return fmt.Sprintf("query parameter %s is required, but not found", err.paramName)
	} else {
		return fmt.Sprintf("query parameter %s is required, but errored: %s", err.paramName, err.err)
	}
}

func (err RequiredParamError) Unwrap() error { return err.err }

type RequiredHeaderError struct {
	paramName string
}

// Error implements error.
func (err RequiredHeaderError) Error() string {
	return fmt.Sprintf("header parameter %s is required, but not found", err.paramName)
}

type InvalidParamFormatError struct {
	err       error
	paramName string
}

// Error implements error.
func (err InvalidParamFormatError) Error() string {
	return fmt.Sprintf("invalid format for parameter %s: %v", err.paramName, err.err)
}

func (err InvalidParamFormatError) Unwrap() error { return err.err }

type TooManyValuesForParamError struct {
	NumValues int
	paramName string
}

// Error implements error.
func (err TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("expected one value for %s, got %d", err.paramName, err.NumValues)
}

// ParameterName is an interface that is implemented by error types that are
// relevant to a specific parameter.
type ParameterError interface {
	error
	// ParamName is the name of the parameter that the error is referring to.
	ParamName() string
}

func (err UnescapedCookieParamError) ParamName() string  { return err.paramName }
func (err UnmarshalingParamError) ParamName() string     { return err.paramName }
func (err RequiredParamError) ParamName() string         { return err.paramName }
func (err RequiredHeaderError) ParamName() string        { return err.paramName }
func (err InvalidParamFormatError) ParamName() string    { return err.paramName }
func (err TooManyValuesForParamError) ParamName() string { return err.paramName }

type ServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

type ServerOption func(*ServerOptions)

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface, opts ...ServerOption) http.Handler {
	options := &ServerOptions{
		BaseURL:    "/",
		BaseRouter: chi.NewRouter(),
		ErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
	}

	for _, f := range opts {
		f(options)
	}

	r := options.BaseRouter
	wrapper := ServerInterfaceWrapper{
		Handler:          si,
		ErrorHandlerFunc: options.ErrorHandlerFunc,
	}

	r.Route(options.BaseURL, func(r chi.Router) {
		r.Get("/authorize", wrapper.Authorize)
		r.Get("/jwks", wrapper.Jwks)
		r.Post("/token", wrapper.Token)
	})
	return r
}

func WithRouter(r chi.Router) ServerOption {
	return func(s *ServerOptions) {
		s.BaseRouter = r
	}
}

func WithServerBaseURL(url string) ServerOption {
	return func(s *ServerOptions) {
		s.BaseURL = url
	}
}

func WithErrorHandler(handler func(w http.ResponseWriter, r *http.Request, err error)) ServerOption {
	return func(s *ServerOptions) {
		s.ErrorHandlerFunc = handler
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
