// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/discord-gophers/goapi-gen version v0.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"encoding/xml"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/discord-gophers/goapi-gen/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/go-chi/render"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Error defines model for Error.
type Error struct {
	// Error code
	Error string `json:"error"`

	// Human-readable error description
	ErrorDescription string `json:"error_description"`

	// URI to error documentation
	ErrorURI *string `json:"error_uri,omitempty"`
}

// ExternalProvider defines model for ExternalProvider.
type ExternalProvider struct {
	// Provider description
	Description *string `json:"description,omitempty"`

	// Human-readable provider name
	DisplayName string `json:"display_name"`

	// Whether the provider is enabled
	Enabled bool `json:"enabled"`

	// URL to provider icon
	IconURL *string `json:"icon_url,omitempty"`

	// Unique provider identifier
	ID string `json:"id"`

	// Provider name
	Name string `json:"name"`
}

// InitiateOAuth2flowParams defines parameters for InitiateOAuth2flow.
type InitiateOAuth2flowParams struct {
	// URL to redirect to after successful authentication
	RedirectURL *string `json:"redirect_url,omitempty"`
}

// InitiateOAuth2flowParamsProvider defines parameters for InitiateOAuth2flow.
type InitiateOAuth2flowParamsProvider string

// HandleOAuth2callbackParams defines parameters for HandleOAuth2callback.
type HandleOAuth2callbackParams struct {
	// Authorization code from the provider
	Code string `json:"code"`

	// State parameter for CSRF protection
	State string `json:"state"`

	// Error code if authorization failed
	Error *string `json:"error,omitempty"`

	// Human-readable error description
	ErrorDescription *string `json:"error_description,omitempty"`
}

// HandleOAuth2callbackParamsProvider defines parameters for HandleOAuth2callback.
type HandleOAuth2callbackParamsProvider string

// Response is a common response struct for all the API calls.
// A Response object may be instantiated via functions for specific operation responses.
// It may also be instantiated directly, for the purpose of responding with a single status code.
type Response struct {
	body        interface{}
	Code        int
	contentType string
}

// Render implements the render.Renderer interface. It sets the Content-Type header
// and status code based on the response definition.
func (resp *Response) Render(w http.ResponseWriter, r *http.Request) error {
	w.Header().Set("Content-Type", resp.contentType)
	render.Status(r, resp.Code)
	return nil
}

// Status is a builder method to override the default status code for a response.
func (resp *Response) Status(code int) *Response {
	resp.Code = code
	return resp
}

// ContentType is a builder method to override the default content type for a response.
func (resp *Response) ContentType(contentType string) *Response {
	resp.contentType = contentType
	return resp
}

// MarshalJSON implements the json.Marshaler interface.
// This is used to only marshal the body of the response.
func (resp *Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(resp.body)
}

// MarshalXML implements the xml.Marshaler interface.
// This is used to only marshal the body of the response.
func (resp *Response) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return e.Encode(resp.body)
}

// ListProvidersJSON200Response is a constructor method for a ListProviders response.
// A *Response is returned with the configured status code and content type from the spec.
func ListProvidersJSON200Response(body struct {
	Providers []ExternalProvider `json:"providers,omitempty"`
}) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// ListProvidersJSON500Response is a constructor method for a ListProviders response.
// A *Response is returned with the configured status code and content type from the spec.
func ListProvidersJSON500Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        500,
		contentType: "application/json",
	}
}

// InitiateOAuth2flowJSON400Response is a constructor method for a InitiateOAuth2flow response.
// A *Response is returned with the configured status code and content type from the spec.
func InitiateOAuth2flowJSON400Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        400,
		contentType: "application/json",
	}
}

// InitiateOAuth2flowJSON404Response is a constructor method for a InitiateOAuth2flow response.
// A *Response is returned with the configured status code and content type from the spec.
func InitiateOAuth2flowJSON404Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        404,
		contentType: "application/json",
	}
}

// InitiateOAuth2flowJSON500Response is a constructor method for a InitiateOAuth2flow response.
// A *Response is returned with the configured status code and content type from the spec.
func InitiateOAuth2flowJSON500Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        500,
		contentType: "application/json",
	}
}

// HandleOAuth2callbackJSON400Response is a constructor method for a HandleOAuth2callback response.
// A *Response is returned with the configured status code and content type from the spec.
func HandleOAuth2callbackJSON400Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        400,
		contentType: "application/json",
	}
}

// HandleOAuth2callbackJSON401Response is a constructor method for a HandleOAuth2callback response.
// A *Response is returned with the configured status code and content type from the spec.
func HandleOAuth2callbackJSON401Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        401,
		contentType: "application/json",
	}
}

// HandleOAuth2callbackJSON404Response is a constructor method for a HandleOAuth2callback response.
// A *Response is returned with the configured status code and content type from the spec.
func HandleOAuth2callbackJSON404Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        404,
		contentType: "application/json",
	}
}

// HandleOAuth2callbackJSON500Response is a constructor method for a HandleOAuth2callback response.
// A *Response is returned with the configured status code and content type from the spec.
func HandleOAuth2callbackJSON500Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        500,
		contentType: "application/json",
	}
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List available external providers
	// (GET /providers)
	ListProviders(w http.ResponseWriter, r *http.Request) *Response
	// Initiate OAuth2 flow
	// (GET /{provider})
	InitiateOAuth2flow(w http.ResponseWriter, r *http.Request, provider InitiateOAuth2flowParamsProvider, params InitiateOAuth2flowParams) *Response
	// Handle OAuth2 callback
	// (GET /{provider}/callback)
	HandleOAuth2callback(w http.ResponseWriter, r *http.Request, provider HandleOAuth2callbackParamsProvider, params HandleOAuth2callbackParams) *Response
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler          ServerInterface
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// ListProviders operation middleware
func (siw *ServerInterfaceWrapper) ListProviders(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.ListProviders(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// InitiateOAuth2flow operation middleware
func (siw *ServerInterfaceWrapper) InitiateOAuth2flow(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Path parameter "provider" -------------
	var provider InitiateOAuth2flowParamsProvider

	if err := runtime.BindStyledParameter("simple", false, "provider", chi.URLParam(r, "provider"), &provider); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "provider"})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params InitiateOAuth2flowParams

	// ------------- Optional query parameter "redirect_url" -------------

	if err := runtime.BindQueryParameter("form", true, false, "redirect_url", r.URL.Query(), &params.RedirectURL); err != nil {
		err = fmt.Errorf("invalid format for parameter redirect_url: %w", err)
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "redirect_url"})
		return
	}

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.InitiateOAuth2flow(w, r, provider, params)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// HandleOAuth2callback operation middleware
func (siw *ServerInterfaceWrapper) HandleOAuth2callback(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Path parameter "provider" -------------
	var provider HandleOAuth2callbackParamsProvider

	if err := runtime.BindStyledParameter("simple", false, "provider", chi.URLParam(r, "provider"), &provider); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "provider"})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params HandleOAuth2callbackParams

	// ------------- Required query parameter "code" -------------

	if err := runtime.BindQueryParameter("form", true, true, "code", r.URL.Query(), &params.Code); err != nil {
		err = fmt.Errorf("invalid format for parameter code: %w", err)
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{err, "code"})
		return
	}

	// ------------- Required query parameter "state" -------------

	if err := runtime.BindQueryParameter("form", true, true, "state", r.URL.Query(), &params.State); err != nil {
		err = fmt.Errorf("invalid format for parameter state: %w", err)
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{err, "state"})
		return
	}

	// ------------- Optional query parameter "error" -------------

	if err := runtime.BindQueryParameter("form", true, false, "error", r.URL.Query(), &params.Error); err != nil {
		err = fmt.Errorf("invalid format for parameter error: %w", err)
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "error"})
		return
	}

	// ------------- Optional query parameter "error_description" -------------

	if err := runtime.BindQueryParameter("form", true, false, "error_description", r.URL.Query(), &params.ErrorDescription); err != nil {
		err = fmt.Errorf("invalid format for parameter error_description: %w", err)
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "error_description"})
		return
	}

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.HandleOAuth2callback(w, r, provider, params)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	err       error
	paramName string
}

// Error implements error.
func (err UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter %s: %v", err.paramName, err.err)
}

func (err UnescapedCookieParamError) Unwrap() error { return err.err }

type UnmarshalingParamError struct {
	err       error
	paramName string
}

// Error implements error.
func (err UnmarshalingParamError) Error() string {
	return fmt.Sprintf("error unmarshaling parameter %s as JSON: %v", err.paramName, err.err)
}

func (err UnmarshalingParamError) Unwrap() error { return err.err }

type RequiredParamError struct {
	err       error
	paramName string
}

// Error implements error.
func (err RequiredParamError) Error() string {
	if err.err == nil {
		return fmt.Sprintf("query parameter %s is required, but not found", err.paramName)
	} else {
		return fmt.Sprintf("query parameter %s is required, but errored: %s", err.paramName, err.err)
	}
}

func (err RequiredParamError) Unwrap() error { return err.err }

type RequiredHeaderError struct {
	paramName string
}

// Error implements error.
func (err RequiredHeaderError) Error() string {
	return fmt.Sprintf("header parameter %s is required, but not found", err.paramName)
}

type InvalidParamFormatError struct {
	err       error
	paramName string
}

// Error implements error.
func (err InvalidParamFormatError) Error() string {
	return fmt.Sprintf("invalid format for parameter %s: %v", err.paramName, err.err)
}

func (err InvalidParamFormatError) Unwrap() error { return err.err }

type TooManyValuesForParamError struct {
	NumValues int
	paramName string
}

// Error implements error.
func (err TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("expected one value for %s, got %d", err.paramName, err.NumValues)
}

// ParameterName is an interface that is implemented by error types that are
// relevant to a specific parameter.
type ParameterError interface {
	error
	// ParamName is the name of the parameter that the error is referring to.
	ParamName() string
}

func (err UnescapedCookieParamError) ParamName() string  { return err.paramName }
func (err UnmarshalingParamError) ParamName() string     { return err.paramName }
func (err RequiredParamError) ParamName() string         { return err.paramName }
func (err RequiredHeaderError) ParamName() string        { return err.paramName }
func (err InvalidParamFormatError) ParamName() string    { return err.paramName }
func (err TooManyValuesForParamError) ParamName() string { return err.paramName }

type ServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

type ServerOption func(*ServerOptions)

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface, opts ...ServerOption) http.Handler {
	options := &ServerOptions{
		BaseURL:    "/",
		BaseRouter: chi.NewRouter(),
		ErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
	}

	for _, f := range opts {
		f(options)
	}

	r := options.BaseRouter
	wrapper := ServerInterfaceWrapper{
		Handler:          si,
		ErrorHandlerFunc: options.ErrorHandlerFunc,
	}

	r.Route(options.BaseURL, func(r chi.Router) {
		r.Get("/providers", wrapper.ListProviders)
		r.Get("/{provider}", wrapper.InitiateOAuth2flow)
		r.Get("/{provider}/callback", wrapper.HandleOAuth2callback)
	})
	return r
}

func WithRouter(r chi.Router) ServerOption {
	return func(s *ServerOptions) {
		s.BaseRouter = r
	}
}

func WithServerBaseURL(url string) ServerOption {
	return func(s *ServerOptions) {
		s.BaseURL = url
	}
}

func WithErrorHandler(handler func(w http.ResponseWriter, r *http.Request, err error)) ServerOption {
	return func(s *ServerOptions) {
		s.ErrorHandlerFunc = handler
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xXW2/bOBP9KwS/D9hdQLHcy77oLb1tvQhQI2nRhyAIaGoksZVIhRy59Qb+7wuSoiTL",
	"ktNg0W2xT5Ys8szhXM5w7ilXVa0kSDQ0uaeGF1Ax9/haa6XtQ61VDRoFuL8h/J2C4VrUKJSkiV9NuEqB",
	"RhS+sqougSZUyC0rRXqr4a4BgzSiuKvtB4NayJzuIw94e4A2Bn/bVEyeaWAp25RA3A4yXDI0+b4A0poj",
	"wpBKGCNkTpj7U2hISc00qwBBz9NptDim8eFyRVAF84o3FUhkLYFM6YohTajdeoS7j2gwT5Pr1olTZ7/p",
	"tqrNJ+BoKb3+iqAlK9dabUUKE0E56b2wbdZjVyKXREjyRWBBdqrR5A+l8hII41w1cjJqqTB1yXa3klXw",
	"YMDqwMCtHpr2hibjIO3W9Bj7YwFYgCZYDICFIWHDAB51Ax30RqkSmLTYgit52+hyKsQXNsQ9Lh/5qkCs",
	"TRLHKWyhtCEwi9ydYcFVFYsUJArcxaJiOZg4PytVrha1zB/MkIiKicN+kOKuGZ7TGciEy92eVT7rxun4",
	"rGcDMoc0SmBh/dxuPkiFPnDHmbyPqAHeaIG7K6szPndfANOgzxss7NvGvb0Jrvrz43saeVVyMXRfe3Y2",
	"GnRvgYXM1PE5z9crkilNoK0gEgLUe/Sdtfw0frd69ZIIiZDrUNEo0LkklB/pvHa+XtGIbkEbb+bJYrlY",
	"Wm+rGiSrBU3os8Vy8YxGtGZYuGPGwaJ7ywGP2V4CNloawkgpDBKVEVaWIa9PnMFQZ9kTX6U0oRfC4Hrw",
	"VYOplTTe4U+XS/vDlUSQjgar61Jwtz3+ZLyG+E5wLDUHxxAIlXv4v4aMJvR/cd9O4raXxEfyte/ix7Rm",
	"O5cY41SxEnPgnIvWJcEdPY99RH9/5JFO0nXaPMFgJdsAGNBb0L4P+KxuqorpXWDJtkyUvlOFmA3Y7iMa",
	"34f3/YlkSIUGjsbqkdW6I6xfDGENFkqLv9w5Cci0VsLp9WE6rKRAwRB8rmel+uIys+2ChibXswKxekV+",
	"hUW+iIhXhohUgmtlVIYRyQUWzeY3asuPJi7XgywkXaLQoXJ4Re4DAbKprJ50stOh04h6+IGQ9GI0o9u6",
	"dZp9ZhmCJqbhHIzJmtI5y1YODwXuSN81oHc964Dg2sOQ6QP9/WZUZM+WT+dj6m4R43DSiBbAQmVdqJbm",
	"8U1rvHGUBR8uLx5D3Obj83+jfF6wtLuXnZH2YtgfQmkyyEhH6vn3J9U3QoUkU41MLZFUGN/DfiZpCUXc",
	"diziynikJjFnZblh/POsrKy1svUAxmlKCxV2kUyralpsjjTlLZNp2SpKZ/U/pirnB4Vlh5veQwMiUzrS",
	"TkLzHB80foU22J0/3T3m5dXlG2sZgZ/QMGN3/jPj/ThHRDYSmIwJf8+esh0mm0fY+obpbtbS7eG6eauP",
	"0+eHe8c3SXWHZ9uTm64OcYgG05T4GLmO6BXg2UulPouJe/35ITx3y8xJx/xo/e/0wgrvZKI5gk++P8GR",
	"84bWf0gn+qm6j5f7ccPwaGGoc4o/HOeub2zdedSpfvDKD9EVSGxt04i6udxNdkkcl4qzslAGk+fL5ZLu",
	"b/Z/BwAA//85uOTtshIAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
