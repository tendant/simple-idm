// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/discord-gophers/goapi-gen version v0.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"encoding/xml"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/discord-gophers/goapi-gen/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/go-chi/render"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for UpdateDeviceDisplayNameResponseStatus.
var (
	UnknownUpdateDeviceDisplayNameResponseStatus = UpdateDeviceDisplayNameResponseStatus{}

	UpdateDeviceDisplayNameResponseStatusSuccess = UpdateDeviceDisplayNameResponseStatus{"success"}
)

// DeliveryOption defines model for DeliveryOption.
type DeliveryOption struct {
	DisplayValue string `json:"display_value,omitempty"`
	HashedValue  string `json:"hashed_value,omitempty"`
	UserID       string `json:"user_id,omitempty"`
}

// DeviceWithLogin defines model for DeviceWithLogin.
type DeviceWithLogin struct {
	// Accept headers from the device
	AcceptHeaders string `json:"accept_headers,omitempty"`

	// When the device was first seen
	CreatedAt time.Time `json:"created_at,omitempty"`

	// Human-readable name of the device
	DeviceName string `json:"device_name,omitempty"`

	// Type of device (Mobile, Tablet, Desktop, Other)
	DeviceType string `json:"device_type,omitempty"`

	// User-customizable display name for the device
	DisplayName string `json:"display_name,omitempty"`

	// When the device-login link expires
	ExpiresAt time.Time `json:"expires_at,omitempty"`

	// Unique device fingerprint
	Fingerprint string `json:"fingerprint"`

	// Last login time for this device
	LastLoginAt time.Time `json:"last_login_at,omitempty"`

	// Logins linked to this device
	LinkedLogins []LoginInfo `json:"linked_logins,omitempty"`

	// Screen resolution of the device
	ScreenResolution string `json:"screen_resolution,omitempty"`

	// Timezone of the device
	Timezone string `json:"timezone,omitempty"`

	// User agent string of the device
	UserAgent string `json:"user_agent,omitempty"`
}

// Error defines model for Error.
type Error struct {
	// Error code
	Code string `json:"code"`

	// Error message
	Message string `json:"message"`
}

// ListDevicesResponse defines model for ListDevicesResponse.
type ListDevicesResponse struct {
	Devices []DeviceWithLogin `json:"devices"`
	Message string            `json:"message"`
	Status  string            `json:"status"`
}

// Login defines model for Login.
type Login struct {
	// Token for 2FA verification if required
	LoginToken *string `json:"loginToken,omitempty"`
	Message    string  `json:"message"`

	// Whether 2FA verification is required
	Requires2fA *bool  `json:"requires2FA,omitempty"`
	Status      string `json:"status"`
	User        User   `json:"user"`

	// List of users associated with the login. Usually contains one user, but may contain multiple if same username is shared.
	Users []User `json:"users,omitempty"`
}

// LoginInfo defines model for LoginInfo.
type LoginInfo struct {
	// Login ID
	ID string `json:"id"`

	// Username associated with the login
	Username string `json:"username"`
}

// MultiUsersResponse defines model for MultiUsersResponse.
type MultiUsersResponse struct {
	Users []User `json:"users,omitempty"`
}

// PasswordPolicyResponse defines model for PasswordPolicyResponse.
type PasswordPolicyResponse struct {
	// Whether common passwords are disallowed
	DisallowCommonPwds *bool `json:"disallow_common_pwds,omitempty"`

	// Number of days until password expires
	ExpirationDays *int `json:"expiration_days,omitempty"`

	// Number of previous passwords to check against
	HistoryCheckCount *int `json:"history_check_count,omitempty"`

	// Maximum number of repeated characters allowed
	MaxRepeatedChars *int `json:"max_repeated_chars,omitempty"`

	// Minimum length of the password
	MinLength *int `json:"min_length,omitempty"`

	// Whether the password requires a digit
	RequireDigit *bool `json:"require_digit,omitempty"`

	// Whether the password requires a lowercase letter
	RequireLowercase *bool `json:"require_lowercase,omitempty"`

	// Whether the password requires a special character
	RequireSpecialChar *bool `json:"require_special_char,omitempty"`

	// Whether the password requires an uppercase letter
	RequireUppercase *bool `json:"require_uppercase,omitempty"`
}

// SelectUsersToAssociateRequiredResponse defines model for SelectUsersToAssociateRequiredResponse.
type SelectUsersToAssociateRequiredResponse struct {
	LoginID     string       `json:"login_id,omitempty"`
	Message     string       `json:"message"`
	Status      string       `json:"status"`
	UserOptions []UserOption `json:"user_options"`
}

// Structure added for integration compatibility purposes
type SingleUserResponse struct {
	User User `json:"user,omitempty"`
}

// SuccessResponse defines model for SuccessResponse.
type SuccessResponse struct {
	Result string `json:"result,omitempty"`
}

// TwoFactorMethod defines model for TwoFactorMethod.
type TwoFactorMethod struct {
	Enabled     bool   `json:"enabled"`
	TwoFactorID string `json:"two_factor_id,omitempty"`
	Type        string `json:"type"`
}

// TwoFactorMethodSelection defines model for TwoFactorMethodSelection.
type TwoFactorMethodSelection struct {
	DeliveryOptions []DeliveryOption `json:"delivery_options,omitempty"`
	Type            string           `json:"type,omitempty"`
}

// TwoFactorMethods defines model for TwoFactorMethods.
type TwoFactorMethods struct {
	Count   int               `json:"count"`
	Methods []TwoFactorMethod `json:"methods"`
}

// TwoFactorRequiredResponse defines model for TwoFactorRequiredResponse.
type TwoFactorRequiredResponse struct {
	Message string `json:"message,omitempty"`
	Status  string `json:"status,omitempty"`

	// Temporary token to use for 2FA verification
	TempToken        string                     `json:"temp_token,omitempty"`
	TwoFactorMethods []TwoFactorMethodSelection `json:"two_factor_methods,omitempty"`
}

// UpdateDeviceDisplayNameRequest defines model for UpdateDeviceDisplayNameRequest.
type UpdateDeviceDisplayNameRequest struct {
	// New display name for the device
	DisplayName string `json:"display_name"`
}

// UpdateDeviceDisplayNameResponse defines model for UpdateDeviceDisplayNameResponse.
type UpdateDeviceDisplayNameResponse struct {
	Device  DeviceWithLogin                       `json:"device"`
	Message string                                `json:"message"`
	Status  UpdateDeviceDisplayNameResponseStatus `json:"status"`
}

// User defines model for User.
type User struct {
	Email string `json:"email"`
	ID    string `json:"id"`
	Name  string `json:"name"`
	Role  string `json:"role"`
}

// UserOption defines model for UserOption.
type UserOption struct {
	// fullname of the user
	DisplayName string `json:"display_name,omitempty"`
	Email       string `json:"email,omitempty"`

	// ID of the user
	UserID string `json:"user_id,omitempty"`
}

// UpdateDeviceDisplayNameResponseStatus defines model for UpdateDeviceDisplayNameResponse.Status.
type UpdateDeviceDisplayNameResponseStatus struct {
	value string
}

func (t *UpdateDeviceDisplayNameResponseStatus) ToValue() string {
	return t.value
}
func (t UpdateDeviceDisplayNameResponseStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(t.value)
}
func (t *UpdateDeviceDisplayNameResponseStatus) UnmarshalJSON(data []byte) error {
	var value string
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	return t.FromValue(value)
}
func (t *UpdateDeviceDisplayNameResponseStatus) FromValue(value string) error {
	switch value {

	case UpdateDeviceDisplayNameResponseStatusSuccess.value:
		t.value = value
		return nil

	}
	return fmt.Errorf("unknown enum value: %v", value)
}

// Delete2faJSONBody defines parameters for Delete2fa.
type Delete2faJSONBody struct {
	TwofaID   *string                    `json:"twofa_id,omitempty"`
	TwofaType Delete2faJSONBodyTwofaType `json:"twofa_type"`
}

// Delete2faJSONBodyTwofaType defines parameters for Delete2fa.
type Delete2faJSONBodyTwofaType string

// Post2faDisableJSONBody defines parameters for Post2faDisable.
type Post2faDisableJSONBody struct {
	TwofaType Post2faDisableJSONBodyTwofaType `json:"twofa_type"`
}

// Post2faDisableJSONBodyTwofaType defines parameters for Post2faDisable.
type Post2faDisableJSONBodyTwofaType string

// Post2faEnableJSONBody defines parameters for Post2faEnable.
type Post2faEnableJSONBody struct {
	TwofaType Post2faEnableJSONBodyTwofaType `json:"twofa_type"`
}

// Post2faEnableJSONBodyTwofaType defines parameters for Post2faEnable.
type Post2faEnableJSONBodyTwofaType string

// Post2faSetupJSONBody defines parameters for Post2faSetup.
type Post2faSetupJSONBody struct {
	TwofaType Post2faSetupJSONBodyTwofaType `json:"twofa_type"`
}

// Post2faSetupJSONBodyTwofaType defines parameters for Post2faSetup.
type Post2faSetupJSONBodyTwofaType string

// VerifyTotpSetupJSONBody defines parameters for VerifyTotpSetup.
type VerifyTotpSetupJSONBody struct {
	// TOTP verification code from authenticator app
	Code string `json:"code"`
}

// UnlinkDeviceFromLoginJSONBody defines parameters for UnlinkDeviceFromLogin.
type UnlinkDeviceFromLoginJSONBody struct {
	// Fingerprint of the device to unlink
	Fingerprint string `json:"fingerprint"`
}

// UpdateDeviceDisplayNameJSONBody defines parameters for UpdateDeviceDisplayName.
type UpdateDeviceDisplayNameJSONBody UpdateDeviceDisplayNameRequest

// ChangePasswordJSONBody defines parameters for ChangePassword.
type ChangePasswordJSONBody struct {
	// User's current password
	CurrentPassword string `json:"current_password"`

	// User's new password
	NewPassword string `json:"new_password"`
}

// UpdatePhoneJSONBody defines parameters for UpdatePhone.
type UpdatePhoneJSONBody struct {
	// New phone number to set
	Phone string `json:"phone"`
}

// VerifyPhoneJSONBody defines parameters for VerifyPhone.
type VerifyPhoneJSONBody struct {
	// Verification code received via SMS
	Code string `json:"code"`

	// Phone number to verify
	Phone string `json:"phone"`
}

// SendPhoneVerificationJSONBody defines parameters for SendPhoneVerification.
type SendPhoneVerificationJSONBody struct {
	// Phone number to verify
	Phone string `json:"phone"`
}

// PostUserSwitchJSONBody defines parameters for PostUserSwitch.
type PostUserSwitchJSONBody struct {
	// ID of the user to switch to
	UserID string `json:"user_id"`
}

// ChangeUsernameJSONBody defines parameters for ChangeUsername.
type ChangeUsernameJSONBody struct {
	// login id of the credential to be updated
	LoginID string `json:"login_id"`

	// New username to set
	NewUsername string `json:"new_username"`
}

// AssociateUserJSONBody defines parameters for AssociateUser.
type AssociateUserJSONBody struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// CompleteAssociateUserJSONBody defines parameters for CompleteAssociateUser.
type CompleteAssociateUserJSONBody struct {
	// Optional login ID to associate with. If not provided, the current login will be used.
	LoginID       string       `json:"login_id,omitempty"`
	SelectedUsers []UserOption `json:"selected_users"`
}

// Delete2faJSONRequestBody defines body for Delete2fa for application/json ContentType.
type Delete2faJSONRequestBody Delete2faJSONBody

// Bind implements render.Binder.
func (Delete2faJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// Post2faDisableJSONRequestBody defines body for Post2faDisable for application/json ContentType.
type Post2faDisableJSONRequestBody Post2faDisableJSONBody

// Bind implements render.Binder.
func (Post2faDisableJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// Post2faEnableJSONRequestBody defines body for Post2faEnable for application/json ContentType.
type Post2faEnableJSONRequestBody Post2faEnableJSONBody

// Bind implements render.Binder.
func (Post2faEnableJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// Post2faSetupJSONRequestBody defines body for Post2faSetup for application/json ContentType.
type Post2faSetupJSONRequestBody Post2faSetupJSONBody

// Bind implements render.Binder.
func (Post2faSetupJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// VerifyTotpSetupJSONRequestBody defines body for VerifyTotpSetup for application/json ContentType.
type VerifyTotpSetupJSONRequestBody VerifyTotpSetupJSONBody

// Bind implements render.Binder.
func (VerifyTotpSetupJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// UnlinkDeviceFromLoginJSONRequestBody defines body for UnlinkDeviceFromLogin for application/json ContentType.
type UnlinkDeviceFromLoginJSONRequestBody UnlinkDeviceFromLoginJSONBody

// Bind implements render.Binder.
func (UnlinkDeviceFromLoginJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// UpdateDeviceDisplayNameJSONRequestBody defines body for UpdateDeviceDisplayName for application/json ContentType.
type UpdateDeviceDisplayNameJSONRequestBody UpdateDeviceDisplayNameJSONBody

// Bind implements render.Binder.
func (UpdateDeviceDisplayNameJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// ChangePasswordJSONRequestBody defines body for ChangePassword for application/json ContentType.
type ChangePasswordJSONRequestBody ChangePasswordJSONBody

// Bind implements render.Binder.
func (ChangePasswordJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// UpdatePhoneJSONRequestBody defines body for UpdatePhone for application/json ContentType.
type UpdatePhoneJSONRequestBody UpdatePhoneJSONBody

// Bind implements render.Binder.
func (UpdatePhoneJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// VerifyPhoneJSONRequestBody defines body for VerifyPhone for application/json ContentType.
type VerifyPhoneJSONRequestBody VerifyPhoneJSONBody

// Bind implements render.Binder.
func (VerifyPhoneJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// SendPhoneVerificationJSONRequestBody defines body for SendPhoneVerification for application/json ContentType.
type SendPhoneVerificationJSONRequestBody SendPhoneVerificationJSONBody

// Bind implements render.Binder.
func (SendPhoneVerificationJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// PostUserSwitchJSONRequestBody defines body for PostUserSwitch for application/json ContentType.
type PostUserSwitchJSONRequestBody PostUserSwitchJSONBody

// Bind implements render.Binder.
func (PostUserSwitchJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// ChangeUsernameJSONRequestBody defines body for ChangeUsername for application/json ContentType.
type ChangeUsernameJSONRequestBody ChangeUsernameJSONBody

// Bind implements render.Binder.
func (ChangeUsernameJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// AssociateUserJSONRequestBody defines body for AssociateUser for application/json ContentType.
type AssociateUserJSONRequestBody AssociateUserJSONBody

// Bind implements render.Binder.
func (AssociateUserJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// CompleteAssociateUserJSONRequestBody defines body for CompleteAssociateUser for application/json ContentType.
type CompleteAssociateUserJSONRequestBody CompleteAssociateUserJSONBody

// Bind implements render.Binder.
func (CompleteAssociateUserJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// Response is a common response struct for all the API calls.
// A Response object may be instantiated via functions for specific operation responses.
// It may also be instantiated directly, for the purpose of responding with a single status code.
type Response struct {
	body        interface{}
	Code        int
	contentType string
}

// Render implements the render.Renderer interface. It sets the Content-Type header
// and status code based on the response definition.
func (resp *Response) Render(w http.ResponseWriter, r *http.Request) error {
	w.Header().Set("Content-Type", resp.contentType)
	render.Status(r, resp.Code)
	return nil
}

// Status is a builder method to override the default status code for a response.
func (resp *Response) Status(code int) *Response {
	resp.Code = code
	return resp
}

// ContentType is a builder method to override the default content type for a response.
func (resp *Response) ContentType(contentType string) *Response {
	resp.contentType = contentType
	return resp
}

// MarshalJSON implements the json.Marshaler interface.
// This is used to only marshal the body of the response.
func (resp *Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(resp.body)
}

// MarshalXML implements the xml.Marshaler interface.
// This is used to only marshal the body of the response.
func (resp *Response) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return e.Encode(resp.body)
}

// Get2faMethodsJSON200Response is a constructor method for a Get2faMethods response.
// A *Response is returned with the configured status code and content type from the spec.
func Get2faMethodsJSON200Response(body TwoFactorMethods) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// Get2faMethodsJSON404Response is a constructor method for a Get2faMethods response.
// A *Response is returned with the configured status code and content type from the spec.
func Get2faMethodsJSON404Response(body struct {
	Message *string `json:"message,omitempty"`
}) *Response {
	return &Response{
		body:        body,
		Code:        404,
		contentType: "application/json",
	}
}

// Delete2faJSON200Response is a constructor method for a Delete2fa response.
// A *Response is returned with the configured status code and content type from the spec.
func Delete2faJSON200Response(body SuccessResponse) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// Post2faDisableJSON200Response is a constructor method for a Post2faDisable response.
// A *Response is returned with the configured status code and content type from the spec.
func Post2faDisableJSON200Response(body SuccessResponse) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// Post2faEnableJSON200Response is a constructor method for a Post2faEnable response.
// A *Response is returned with the configured status code and content type from the spec.
func Post2faEnableJSON200Response(body SuccessResponse) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// Post2faSetupJSON201Response is a constructor method for a Post2faSetup response.
// A *Response is returned with the configured status code and content type from the spec.
func Post2faSetupJSON201Response(body SuccessResponse) *Response {
	return &Response{
		body:        body,
		Code:        201,
		contentType: "application/json",
	}
}

// VerifyTotpSetupJSON200Response is a constructor method for a VerifyTotpSetup response.
// A *Response is returned with the configured status code and content type from the spec.
func VerifyTotpSetupJSON200Response(body struct {
	Message *string `json:"message,omitempty"`
	Status  *string `json:"status,omitempty"`
}) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// VerifyTotpSetupJSON400Response is a constructor method for a VerifyTotpSetup response.
// A *Response is returned with the configured status code and content type from the spec.
func VerifyTotpSetupJSON400Response(body struct {
	Code    *string `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
}) *Response {
	return &Response{
		body:        body,
		Code:        400,
		contentType: "application/json",
	}
}

// VerifyTotpSetupJSON500Response is a constructor method for a VerifyTotpSetup response.
// A *Response is returned with the configured status code and content type from the spec.
func VerifyTotpSetupJSON500Response(body struct {
	Code    *string `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
}) *Response {
	return &Response{
		body:        body,
		Code:        500,
		contentType: "application/json",
	}
}

// GetMyDevicesJSON200Response is a constructor method for a GetMyDevices response.
// A *Response is returned with the configured status code and content type from the spec.
func GetMyDevicesJSON200Response(body ListDevicesResponse) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// GetMyDevicesJSON401Response is a constructor method for a GetMyDevices response.
// A *Response is returned with the configured status code and content type from the spec.
func GetMyDevicesJSON401Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        401,
		contentType: "application/json",
	}
}

// GetMyDevicesJSON500Response is a constructor method for a GetMyDevices response.
// A *Response is returned with the configured status code and content type from the spec.
func GetMyDevicesJSON500Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        500,
		contentType: "application/json",
	}
}

// UnlinkDeviceFromLoginJSON200Response is a constructor method for a UnlinkDeviceFromLogin response.
// A *Response is returned with the configured status code and content type from the spec.
func UnlinkDeviceFromLoginJSON200Response(body struct {
	Message string `json:"message"`
	Status  string `json:"status"`
}) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// UpdateDeviceDisplayNameJSON200Response is a constructor method for a UpdateDeviceDisplayName response.
// A *Response is returned with the configured status code and content type from the spec.
func UpdateDeviceDisplayNameJSON200Response(body UpdateDeviceDisplayNameResponse) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// ChangePasswordJSON400Response is a constructor method for a ChangePassword response.
// A *Response is returned with the configured status code and content type from the spec.
func ChangePasswordJSON400Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        400,
		contentType: "application/json",
	}
}

// ChangePasswordJSON401Response is a constructor method for a ChangePassword response.
// A *Response is returned with the configured status code and content type from the spec.
func ChangePasswordJSON401Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        401,
		contentType: "application/json",
	}
}

// ChangePasswordJSON403Response is a constructor method for a ChangePassword response.
// A *Response is returned with the configured status code and content type from the spec.
func ChangePasswordJSON403Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        403,
		contentType: "application/json",
	}
}

// ChangePasswordJSON500Response is a constructor method for a ChangePassword response.
// A *Response is returned with the configured status code and content type from the spec.
func ChangePasswordJSON500Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        500,
		contentType: "application/json",
	}
}

// GetPasswordPolicyJSON200Response is a constructor method for a GetPasswordPolicy response.
// A *Response is returned with the configured status code and content type from the spec.
func GetPasswordPolicyJSON200Response(body PasswordPolicyResponse) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// GetPhoneJSON200Response is a constructor method for a GetPhone response.
// A *Response is returned with the configured status code and content type from the spec.
func GetPhoneJSON200Response(body struct {
	// User's phone number
	Phone *string `json:"phone,omitempty"`
}) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// UpdatePhoneJSON200Response is a constructor method for a UpdatePhone response.
// A *Response is returned with the configured status code and content type from the spec.
func UpdatePhoneJSON200Response(body struct {
	Message *string `json:"message,omitempty"`
	Status  *string `json:"status,omitempty"`
}) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// VerifyPhoneJSON200Response is a constructor method for a VerifyPhone response.
// A *Response is returned with the configured status code and content type from the spec.
func VerifyPhoneJSON200Response(body struct {
	Message *string `json:"message,omitempty"`
	Status  *string `json:"status,omitempty"`
}) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// SendPhoneVerificationJSON200Response is a constructor method for a SendPhoneVerification response.
// A *Response is returned with the configured status code and content type from the spec.
func SendPhoneVerificationJSON200Response(body struct {
	Message *string `json:"message,omitempty"`
	Status  *string `json:"status,omitempty"`
}) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// PostUserSwitchJSON200Response is a constructor method for a PostUserSwitch response.
// A *Response is returned with the configured status code and content type from the spec.
func PostUserSwitchJSON200Response(body interface{}) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// PostUserSwitchJSON400Response is a constructor method for a PostUserSwitch response.
// A *Response is returned with the configured status code and content type from the spec.
func PostUserSwitchJSON400Response(body struct {
	Message *string `json:"message,omitempty"`
}) *Response {
	return &Response{
		body:        body,
		Code:        400,
		contentType: "application/json",
	}
}

// PostUserSwitchJSON403Response is a constructor method for a PostUserSwitch response.
// A *Response is returned with the configured status code and content type from the spec.
func PostUserSwitchJSON403Response(body struct {
	Message *string `json:"message,omitempty"`
}) *Response {
	return &Response{
		body:        body,
		Code:        403,
		contentType: "application/json",
	}
}

// ChangeUsernameJSON400Response is a constructor method for a ChangeUsername response.
// A *Response is returned with the configured status code and content type from the spec.
func ChangeUsernameJSON400Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        400,
		contentType: "application/json",
	}
}

// ChangeUsernameJSON401Response is a constructor method for a ChangeUsername response.
// A *Response is returned with the configured status code and content type from the spec.
func ChangeUsernameJSON401Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        401,
		contentType: "application/json",
	}
}

// ChangeUsernameJSON403Response is a constructor method for a ChangeUsername response.
// A *Response is returned with the configured status code and content type from the spec.
func ChangeUsernameJSON403Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        403,
		contentType: "application/json",
	}
}

// ChangeUsernameJSON409Response is a constructor method for a ChangeUsername response.
// A *Response is returned with the configured status code and content type from the spec.
func ChangeUsernameJSON409Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        409,
		contentType: "application/json",
	}
}

// ChangeUsernameJSON500Response is a constructor method for a ChangeUsername response.
// A *Response is returned with the configured status code and content type from the spec.
func ChangeUsernameJSON500Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        500,
		contentType: "application/json",
	}
}

// FindUsersWithLoginJSON200Response is a constructor method for a FindUsersWithLogin response.
// A *Response is returned with the configured status code and content type from the spec.
func FindUsersWithLoginJSON200Response(body interface{}) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// AssociateUserJSON202Response is a constructor method for a AssociateUser response.
// A *Response is returned with the configured status code and content type from the spec.
func AssociateUserJSON202Response(body interface{}) *Response {
	return &Response{
		body:        body,
		Code:        202,
		contentType: "application/json",
	}
}

// CompleteAssociateUserJSON200Response is a constructor method for a CompleteAssociateUser response.
// A *Response is returned with the configured status code and content type from the spec.
func CompleteAssociateUserJSON200Response(body SuccessResponse) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get login 2FA methods
	// (GET /2fa)
	Get2faMethods(w http.ResponseWriter, r *http.Request) *Response
	// Delete a 2FA method
	// (POST /2fa/delete)
	Delete2fa(w http.ResponseWriter, r *http.Request) *Response
	// Disable an existing 2FA method
	// (POST /2fa/disable)
	Post2faDisable(w http.ResponseWriter, r *http.Request) *Response
	// Enable an existing 2FA method
	// (POST /2fa/enable)
	Post2faEnable(w http.ResponseWriter, r *http.Request) *Response
	// Create a new 2FA method
	// (POST /2fa/setup)
	Post2faSetup(w http.ResponseWriter, r *http.Request) *Response
	// Verify TOTP code during setup
	// (POST /2fa/totp/verify)
	VerifyTotpSetup(w http.ResponseWriter, r *http.Request) *Response
	// Get devices linked to the authenticated user's login
	// (GET /devices)
	GetMyDevices(w http.ResponseWriter, r *http.Request) *Response
	// Unlink a device from a login
	// (POST /devices/unlink)
	UnlinkDeviceFromLogin(w http.ResponseWriter, r *http.Request) *Response
	// Update device display name
	// (PUT /devices/{fingerprint}/display-name)
	UpdateDeviceDisplayName(w http.ResponseWriter, r *http.Request, fingerprint string) *Response
	// Change user password
	// (PUT /password)
	ChangePassword(w http.ResponseWriter, r *http.Request) *Response
	// Get password policy
	// (GET /password/policy)
	GetPasswordPolicy(w http.ResponseWriter, r *http.Request) *Response
	// Get phone number
	// (GET /phone)
	GetPhone(w http.ResponseWriter, r *http.Request) *Response
	// Update phone number
	// (PUT /phone)
	UpdatePhone(w http.ResponseWriter, r *http.Request) *Response
	// Verify phone with code
	// (POST /phone/verify)
	VerifyPhone(w http.ResponseWriter, r *http.Request) *Response
	// Send phone verification code
	// (POST /phone/verify/send)
	SendPhoneVerification(w http.ResponseWriter, r *http.Request) *Response
	// Switch to a different user when multiple users are available for the same login
	// (POST /user/switch)
	PostUserSwitch(w http.ResponseWriter, r *http.Request) *Response
	// Change username
	// (PUT /username)
	ChangeUsername(w http.ResponseWriter, r *http.Request) *Response
	// Get a list of users associated with the current login
	// (GET /users)
	FindUsersWithLogin(w http.ResponseWriter, r *http.Request) *Response
	// Associate a user to the current login
	// (POST /users/associate)
	AssociateUser(w http.ResponseWriter, r *http.Request) *Response
	// Complete user association after user selection
	// (POST /users/associate/complete)
	CompleteAssociateUser(w http.ResponseWriter, r *http.Request) *Response
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler          ServerInterface
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// Get2faMethods operation middleware
func (siw *ServerInterfaceWrapper) Get2faMethods(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.Get2faMethods(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// Delete2fa operation middleware
func (siw *ServerInterfaceWrapper) Delete2fa(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.Delete2fa(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// Post2faDisable operation middleware
func (siw *ServerInterfaceWrapper) Post2faDisable(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.Post2faDisable(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// Post2faEnable operation middleware
func (siw *ServerInterfaceWrapper) Post2faEnable(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.Post2faEnable(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// Post2faSetup operation middleware
func (siw *ServerInterfaceWrapper) Post2faSetup(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.Post2faSetup(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// VerifyTotpSetup operation middleware
func (siw *ServerInterfaceWrapper) VerifyTotpSetup(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.VerifyTotpSetup(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// GetMyDevices operation middleware
func (siw *ServerInterfaceWrapper) GetMyDevices(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.GetMyDevices(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// UnlinkDeviceFromLogin operation middleware
func (siw *ServerInterfaceWrapper) UnlinkDeviceFromLogin(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.UnlinkDeviceFromLogin(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// UpdateDeviceDisplayName operation middleware
func (siw *ServerInterfaceWrapper) UpdateDeviceDisplayName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Path parameter "fingerprint" -------------
	var fingerprint string

	if err := runtime.BindStyledParameter("simple", false, "fingerprint", chi.URLParam(r, "fingerprint"), &fingerprint); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "fingerprint"})
		return
	}

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.UpdateDeviceDisplayName(w, r, fingerprint)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// ChangePassword operation middleware
func (siw *ServerInterfaceWrapper) ChangePassword(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.ChangePassword(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// GetPasswordPolicy operation middleware
func (siw *ServerInterfaceWrapper) GetPasswordPolicy(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.GetPasswordPolicy(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// GetPhone operation middleware
func (siw *ServerInterfaceWrapper) GetPhone(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.GetPhone(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// UpdatePhone operation middleware
func (siw *ServerInterfaceWrapper) UpdatePhone(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.UpdatePhone(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// VerifyPhone operation middleware
func (siw *ServerInterfaceWrapper) VerifyPhone(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.VerifyPhone(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// SendPhoneVerification operation middleware
func (siw *ServerInterfaceWrapper) SendPhoneVerification(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.SendPhoneVerification(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// PostUserSwitch operation middleware
func (siw *ServerInterfaceWrapper) PostUserSwitch(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.PostUserSwitch(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// ChangeUsername operation middleware
func (siw *ServerInterfaceWrapper) ChangeUsername(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.ChangeUsername(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// FindUsersWithLogin operation middleware
func (siw *ServerInterfaceWrapper) FindUsersWithLogin(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.FindUsersWithLogin(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// AssociateUser operation middleware
func (siw *ServerInterfaceWrapper) AssociateUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.AssociateUser(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// CompleteAssociateUser operation middleware
func (siw *ServerInterfaceWrapper) CompleteAssociateUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.CompleteAssociateUser(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	err       error
	paramName string
}

// Error implements error.
func (err UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter %s: %v", err.paramName, err.err)
}

func (err UnescapedCookieParamError) Unwrap() error { return err.err }

type UnmarshalingParamError struct {
	err       error
	paramName string
}

// Error implements error.
func (err UnmarshalingParamError) Error() string {
	return fmt.Sprintf("error unmarshaling parameter %s as JSON: %v", err.paramName, err.err)
}

func (err UnmarshalingParamError) Unwrap() error { return err.err }

type RequiredParamError struct {
	err       error
	paramName string
}

// Error implements error.
func (err RequiredParamError) Error() string {
	if err.err == nil {
		return fmt.Sprintf("query parameter %s is required, but not found", err.paramName)
	} else {
		return fmt.Sprintf("query parameter %s is required, but errored: %s", err.paramName, err.err)
	}
}

func (err RequiredParamError) Unwrap() error { return err.err }

type RequiredHeaderError struct {
	paramName string
}

// Error implements error.
func (err RequiredHeaderError) Error() string {
	return fmt.Sprintf("header parameter %s is required, but not found", err.paramName)
}

type InvalidParamFormatError struct {
	err       error
	paramName string
}

// Error implements error.
func (err InvalidParamFormatError) Error() string {
	return fmt.Sprintf("invalid format for parameter %s: %v", err.paramName, err.err)
}

func (err InvalidParamFormatError) Unwrap() error { return err.err }

type TooManyValuesForParamError struct {
	NumValues int
	paramName string
}

// Error implements error.
func (err TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("expected one value for %s, got %d", err.paramName, err.NumValues)
}

// ParameterName is an interface that is implemented by error types that are
// relevant to a specific parameter.
type ParameterError interface {
	error
	// ParamName is the name of the parameter that the error is referring to.
	ParamName() string
}

func (err UnescapedCookieParamError) ParamName() string  { return err.paramName }
func (err UnmarshalingParamError) ParamName() string     { return err.paramName }
func (err RequiredParamError) ParamName() string         { return err.paramName }
func (err RequiredHeaderError) ParamName() string        { return err.paramName }
func (err InvalidParamFormatError) ParamName() string    { return err.paramName }
func (err TooManyValuesForParamError) ParamName() string { return err.paramName }

type ServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

type ServerOption func(*ServerOptions)

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface, opts ...ServerOption) http.Handler {
	options := &ServerOptions{
		BaseURL:    "/",
		BaseRouter: chi.NewRouter(),
		ErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
	}

	for _, f := range opts {
		f(options)
	}

	r := options.BaseRouter
	wrapper := ServerInterfaceWrapper{
		Handler:          si,
		ErrorHandlerFunc: options.ErrorHandlerFunc,
	}

	r.Route(options.BaseURL, func(r chi.Router) {
		r.Get("/2fa", wrapper.Get2faMethods)
		r.Post("/2fa/delete", wrapper.Delete2fa)
		r.Post("/2fa/disable", wrapper.Post2faDisable)
		r.Post("/2fa/enable", wrapper.Post2faEnable)
		r.Post("/2fa/setup", wrapper.Post2faSetup)
		r.Post("/2fa/totp/verify", wrapper.VerifyTotpSetup)
		r.Get("/devices", wrapper.GetMyDevices)
		r.Post("/devices/unlink", wrapper.UnlinkDeviceFromLogin)
		r.Put("/devices/{fingerprint}/display-name", wrapper.UpdateDeviceDisplayName)
		r.Put("/password", wrapper.ChangePassword)
		r.Get("/password/policy", wrapper.GetPasswordPolicy)
		r.Get("/phone", wrapper.GetPhone)
		r.Put("/phone", wrapper.UpdatePhone)
		r.Post("/phone/verify", wrapper.VerifyPhone)
		r.Post("/phone/verify/send", wrapper.SendPhoneVerification)
		r.Post("/user/switch", wrapper.PostUserSwitch)
		r.Put("/username", wrapper.ChangeUsername)
		r.Get("/users", wrapper.FindUsersWithLogin)
		r.Post("/users/associate", wrapper.AssociateUser)
		r.Post("/users/associate/complete", wrapper.CompleteAssociateUser)
	})
	return r
}

func WithRouter(r chi.Router) ServerOption {
	return func(s *ServerOptions) {
		s.BaseRouter = r
	}
}

func WithServerBaseURL(url string) ServerOption {
	return func(s *ServerOptions) {
		s.BaseURL = url
	}
}

func WithErrorHandler(handler func(w http.ResponseWriter, r *http.Request, err error)) ServerOption {
	return func(s *ServerOptions) {
		s.ErrorHandlerFunc = handler
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"WXw2h9uEGX9W9aPIzWbzvwAAAP//ZN1Q4F9OAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
