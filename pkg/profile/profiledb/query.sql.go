// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package profiledb

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const create2FAInit = `-- name: Create2FAInit :one
INSERT INTO login_2fa (login_id, two_factor_secret, two_factor_enabled, two_factor_backup_codes)
VALUES ($1, $2, FALSE, $3::TEXT[])
RETURNING id
`

type Create2FAInitParams struct {
	LoginID         uuid.UUID   `json:"login_id"`
	TwoFactorSecret pgtype.Text `json:"two_factor_secret"`
	Column3         []string    `json:"column_3"`
}

func (q *Queries) Create2FAInit(ctx context.Context, arg Create2FAInitParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, create2FAInit, arg.LoginID, arg.TwoFactorSecret, arg.Column3)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const disable2FAByLoginId = `-- name: Disable2FAByLoginId :exec
UPDATE login_2fa
SET deleted_at = now() AT TIME ZONE 'utc'
WHERE login_id = $1
AND deleted_at IS NULL
`

func (q *Queries) Disable2FAByLoginId(ctx context.Context, loginID uuid.UUID) error {
	_, err := q.db.Exec(ctx, disable2FAByLoginId, loginID)
	return err
}

const enable2FAByLoginId = `-- name: Enable2FAByLoginId :exec
UPDATE login_2fa
SET two_factor_secret = $1::text,
    two_factor_enabled = TRUE,
    two_factor_backup_codes = $2::text[],
    last_modified_at = NOW() at time zone 'utc'
WHERE login_id = $3
AND deleted_at IS NULL
`

type Enable2FAByLoginIdParams struct {
	Column1 string    `json:"column_1"`
	Column2 []string  `json:"column_2"`
	LoginID uuid.UUID `json:"login_id"`
}

func (q *Queries) Enable2FAByLoginId(ctx context.Context, arg Enable2FAByLoginIdParams) error {
	_, err := q.db.Exec(ctx, enable2FAByLoginId, arg.Column1, arg.Column2, arg.LoginID)
	return err
}

const findUserByUsername = `-- name: FindUserByUsername :many
SELECT id, username
FROM login
WHERE username = $1
AND deleted_at Is NULL
`

type FindUserByUsernameRow struct {
	ID       uuid.UUID      `json:"id"`
	Username sql.NullString `json:"username"`
}

func (q *Queries) FindUserByUsername(ctx context.Context, username sql.NullString) ([]FindUserByUsernameRow, error) {
	rows, err := q.db.Query(ctx, findUserByUsername, username)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindUserByUsernameRow
	for rows.Next() {
		var i FindUserByUsernameRow
		if err := rows.Scan(&i.ID, &i.Username); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLoginById = `-- name: GetLoginById :one
SELECT id, username
FROM login
WHERE id = $1
AND deleted_at IS NULL
`

type GetLoginByIdRow struct {
	ID       uuid.UUID      `json:"id"`
	Username sql.NullString `json:"username"`
}

func (q *Queries) GetLoginById(ctx context.Context, id uuid.UUID) (GetLoginByIdRow, error) {
	row := q.db.QueryRow(ctx, getLoginById, id)
	var i GetLoginByIdRow
	err := row.Scan(&i.ID, &i.Username)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT u.id, u.email, u.created_at, u.last_modified_at, u.login_id, l.username, l.password
FROM users u JOIN login l ON u.login_id = l.id
WHERE u.id = $1
`

type GetUserByIdRow struct {
	ID             uuid.UUID      `json:"id"`
	Email          string         `json:"email"`
	CreatedAt      time.Time      `json:"created_at"`
	LastModifiedAt time.Time      `json:"last_modified_at"`
	LoginID        uuid.NullUUID  `json:"login_id"`
	Username       sql.NullString `json:"username"`
	Password       []byte         `json:"password"`
}

func (q *Queries) GetUserById(ctx context.Context, id uuid.UUID) (GetUserByIdRow, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i GetUserByIdRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.CreatedAt,
		&i.LastModifiedAt,
		&i.LoginID,
		&i.Username,
		&i.Password,
	)
	return i, err
}

const getUserPhone = `-- name: GetUserPhone :one
SELECT phone
FROM users
WHERE id = $1
`

func (q *Queries) GetUserPhone(ctx context.Context, id uuid.UUID) (sql.NullString, error) {
	row := q.db.QueryRow(ctx, getUserPhone, id)
	var phone sql.NullString
	err := row.Scan(&phone)
	return phone, err
}

const updateUserLoginId = `-- name: UpdateUserLoginId :one
UPDATE users
SET login_id = $2,
    last_modified_at = NOW() at time zone 'utc'
WHERE id = $1
RETURNING login_id
`

type UpdateUserLoginIdParams struct {
	ID      uuid.UUID     `json:"id"`
	LoginID uuid.NullUUID `json:"login_id"`
}

func (q *Queries) UpdateUserLoginId(ctx context.Context, arg UpdateUserLoginIdParams) (uuid.NullUUID, error) {
	row := q.db.QueryRow(ctx, updateUserLoginId, arg.ID, arg.LoginID)
	var login_id uuid.NullUUID
	err := row.Scan(&login_id)
	return login_id, err
}

const updateUserPhone = `-- name: UpdateUserPhone :exec
UPDATE users
SET phone = $2,
    last_modified_at = NOW() at time zone 'utc'
WHERE id = $1
`

type UpdateUserPhoneParams struct {
	ID    uuid.UUID      `json:"id"`
	Phone sql.NullString `json:"phone"`
}

func (q *Queries) UpdateUserPhone(ctx context.Context, arg UpdateUserPhoneParams) error {
	_, err := q.db.Exec(ctx, updateUserPhone, arg.ID, arg.Phone)
	return err
}

const updateUsername = `-- name: UpdateUsername :exec
UPDATE login
SET username = $2,
    updated_at = NOW() at time zone 'utc'
WHERE id = $1
`

type UpdateUsernameParams struct {
	ID       uuid.UUID      `json:"id"`
	Username sql.NullString `json:"username"`
}

func (q *Queries) UpdateUsername(ctx context.Context, arg UpdateUsernameParams) error {
	_, err := q.db.Exec(ctx, updateUsername, arg.ID, arg.Username)
	return err
}
