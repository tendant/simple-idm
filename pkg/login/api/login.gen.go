// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/discord-gophers/goapi-gen version v0.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"encoding/xml"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/discord-gophers/goapi-gen/runtime"
	openapi_types "github.com/discord-gophers/goapi-gen/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/go-chi/render"
)

// AssociateUserResponse defines model for AssociateUserResponse.
type AssociateUserResponse struct {
	LoginID    string     `json:"login_id,omitempty"`
	Message    string     `json:"message,omitempty"`
	Status     string     `json:"status,omitempty"`
	UserOption UserOption `json:"user_option,omitempty"`
}

// DeliveryOption defines model for DeliveryOption.
type DeliveryOption struct {
	DisplayValue string `json:"display_value,omitempty"`
	HashedValue  string `json:"hashed_value,omitempty"`
	UserID       string `json:"user_id,omitempty"`
}

// EmailVerifyRequest defines model for EmailVerifyRequest.
type EmailVerifyRequest struct {
	Email string `json:"email"`
}

// FindUsernameRequest defines model for FindUsernameRequest.
type FindUsernameRequest struct {
	// Email address to find username for
	Email openapi_types.Email `json:"email"`
}

// Login defines model for Login.
type Login struct {
	// Token for 2FA verification if required
	LoginToken *string `json:"loginToken,omitempty"`
	Message    string  `json:"message"`

	// Whether 2FA verification is required
	Requires2fA *bool  `json:"requires2FA,omitempty"`
	Status      string `json:"status"`
	User        User   `json:"user"`

	// List of users associated with the login. Usually contains one user, but may contain multiple if same username is shared.
	Users []User `json:"users,omitempty"`
}

// LoginResponse defines model for LoginResponse.
type LoginResponse struct {
	AccessToken  string `json:"access_token"`
	RefreshToken string `json:"refresh_token"`
}

// MultiUsersResponse defines model for MultiUsersResponse.
type MultiUsersResponse struct {
	Users []User `json:"users,omitempty"`
}

// PasswordPolicyResponse defines model for PasswordPolicyResponse.
type PasswordPolicyResponse struct {
	// Whether common passwords are disallowed
	DisallowCommonPwds *bool `json:"disallow_common_pwds,omitempty"`

	// Number of days until password expires
	ExpirationDays *int `json:"expiration_days,omitempty"`

	// Number of previous passwords to check against
	HistoryCheckCount *int `json:"history_check_count,omitempty"`

	// Maximum number of repeated characters allowed
	MaxRepeatedChars *int `json:"max_repeated_chars,omitempty"`

	// Minimum length of the password
	MinLength *int `json:"min_length,omitempty"`

	// Whether the password requires a digit
	RequireDigit *bool `json:"require_digit,omitempty"`

	// Whether the password requires a lowercase letter
	RequireLowercase *bool `json:"require_lowercase,omitempty"`

	// Whether the password requires a special character
	RequireSpecialChar *bool `json:"require_special_char,omitempty"`

	// Whether the password requires an uppercase letter
	RequireUppercase *bool `json:"require_uppercase,omitempty"`
}

// PasswordReset defines model for PasswordReset.
type PasswordReset struct {
	NewPassword string `json:"new_password"`
	Token       string `json:"token"`
}

// PasswordResetInit defines model for PasswordResetInit.
type PasswordResetInit struct {
	// Username of the account to reset password for
	Username string `json:"username"`
}

// RegisterRequest defines model for RegisterRequest.
type RegisterRequest struct {
	Email    string `json:"email"`
	Name     string `json:"name"`
	Password string `json:"password"`
}

// SelectUserRequiredResponse defines model for SelectUserRequiredResponse.
type SelectUserRequiredResponse struct {
	Message   string `json:"message,omitempty"`
	Status    string `json:"status,omitempty"`
	TempToken string `json:"temp_token,omitempty"`
	Users     []User `json:"users,omitempty"`
}

// SelectUsersToAssociateRequiredResponse defines model for SelectUsersToAssociateRequiredResponse.
type SelectUsersToAssociateRequiredResponse struct {
	LoginID     string       `json:"login_id,omitempty"`
	Message     string       `json:"message,omitempty"`
	Status      string       `json:"status,omitempty"`
	UserOptions []UserOption `json:"user_options,omitempty"`
}

// Structure added for integration compatibility purposes
type SingleUserResponse struct {
	User User `json:"user,omitempty"`
}

// SuccessResponse defines model for SuccessResponse.
type SuccessResponse struct {
	Result string `json:"result,omitempty"`
}

// Tokens defines model for Tokens.
type Tokens struct {
	AccessToken  string `json:"access_token"`
	RefreshToken string `json:"refresh_token"`
}

// TwoFactorMethod defines model for TwoFactorMethod.
type TwoFactorMethod struct {
	DeliveryOptions []DeliveryOption `json:"delivery_options,omitempty"`
	Type            string           `json:"type,omitempty"`
}

// TwoFactorRequiredResponse defines model for TwoFactorRequiredResponse.
type TwoFactorRequiredResponse struct {
	Message string `json:"message,omitempty"`
	Status  string `json:"status,omitempty"`

	// Temporary token to use for 2FA verification
	TempToken        string            `json:"temp_token,omitempty"`
	TwoFactorMethods []TwoFactorMethod `json:"two_factor_methods,omitempty"`
}

// User defines model for User.
type User struct {
	Email string `json:"email"`
	ID    string `json:"id"`
	Name  string `json:"name"`
	Role  string `json:"role"`
}

// UserOption defines model for UserOption.
type UserOption struct {
	// fullname of the user
	DisplayName string `json:"display_name,omitempty"`

	// ID of the user
	UserID string `json:"user_id,omitempty"`
}

// Post2faSendJSONBody defines parameters for Post2faSend.
type Post2faSendJSONBody struct {
	DeliveryOption string `json:"delivery_option"`
	TwofaType      string `json:"twofa_type"`
	UserID         string `json:"user_id"`
}

// Post2faValidateJSONBody defines parameters for Post2faValidate.
type Post2faValidateJSONBody struct {
	Passcode  string `json:"passcode"`
	TwofaType string `json:"twofa_type"`
}

// PostEmailVerifyJSONBody defines parameters for PostEmailVerify.
type PostEmailVerifyJSONBody EmailVerifyRequest

// PostLoginJSONBody defines parameters for PostLogin.
type PostLoginJSONBody struct {
	// 2FA verification code if enabled
	Code     string `json:"code,omitempty"`
	Password string `json:"password"`
	Username string `json:"username"`
}

// PostMobile2faSendJSONBody defines parameters for PostMobile2faSend.
type PostMobile2faSendJSONBody struct {
	DeliveryOption string `json:"delivery_option"`
	TempToken      string `json:"temp_token"`
	TwofaType      string `json:"twofa_type"`
	UserID         string `json:"user_id"`
}

// PostMobile2faValidateJSONBody defines parameters for PostMobile2faValidate.
type PostMobile2faValidateJSONBody struct {
	Passcode  string `json:"passcode"`
	TempToken string `json:"temp_token"`
	TwofaType string `json:"twofa_type"`
}

// PostMobileLoginJSONBody defines parameters for PostMobileLogin.
type PostMobileLoginJSONBody struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// PostMobileTokenRefreshJSONBody defines parameters for PostMobileTokenRefresh.
type PostMobileTokenRefreshJSONBody struct {
	RefreshToken string `json:"refresh_token,omitempty"`
}

// PostMobileUserSwitchJSONBody defines parameters for PostMobileUserSwitch.
type PostMobileUserSwitchJSONBody struct {
	// JWT access token
	AccessToken *string `json:"access_token,omitempty"`

	// Temp token
	TempToken *string `json:"temp_token,omitempty"`

	// ID of the user to switch to
	UserID string `json:"user_id"`
}

// MobileFindUsersWithLoginParams defines parameters for MobileFindUsersWithLogin.
type MobileFindUsersWithLoginParams struct {
	// Temp token
	TempToken *string `json:"temp_token,omitempty"`

	// JWT access token
	AccessToken *string `json:"access_token,omitempty"`
}

// PostPasswordResetJSONBody defines parameters for PostPasswordReset.
type PostPasswordResetJSONBody PasswordReset

// PostPasswordResetInitJSONBody defines parameters for PostPasswordResetInit.
type PostPasswordResetInitJSONBody PasswordResetInit

// GetPasswordResetPolicyParams defines parameters for GetPasswordResetPolicy.
type GetPasswordResetPolicyParams struct {
	// Password reset token
	Token string `json:"token"`
}

// PostRegisterJSONBody defines parameters for PostRegister.
type PostRegisterJSONBody RegisterRequest

// PostUserSwitchJSONBody defines parameters for PostUserSwitch.
type PostUserSwitchJSONBody struct {
	// ID of the user to switch to
	UserID string `json:"user_id"`
}

// PostUsernameFindJSONBody defines parameters for PostUsernameFind.
type PostUsernameFindJSONBody FindUsernameRequest

// Post2faSendJSONRequestBody defines body for Post2faSend for application/json ContentType.
type Post2faSendJSONRequestBody Post2faSendJSONBody

// Bind implements render.Binder.
func (Post2faSendJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// Post2faValidateJSONRequestBody defines body for Post2faValidate for application/json ContentType.
type Post2faValidateJSONRequestBody Post2faValidateJSONBody

// Bind implements render.Binder.
func (Post2faValidateJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// PostEmailVerifyJSONRequestBody defines body for PostEmailVerify for application/json ContentType.
type PostEmailVerifyJSONRequestBody PostEmailVerifyJSONBody

// Bind implements render.Binder.
func (PostEmailVerifyJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// PostLoginJSONRequestBody defines body for PostLogin for application/json ContentType.
type PostLoginJSONRequestBody PostLoginJSONBody

// Bind implements render.Binder.
func (PostLoginJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// PostMobile2faSendJSONRequestBody defines body for PostMobile2faSend for application/json ContentType.
type PostMobile2faSendJSONRequestBody PostMobile2faSendJSONBody

// Bind implements render.Binder.
func (PostMobile2faSendJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// PostMobile2faValidateJSONRequestBody defines body for PostMobile2faValidate for application/json ContentType.
type PostMobile2faValidateJSONRequestBody PostMobile2faValidateJSONBody

// Bind implements render.Binder.
func (PostMobile2faValidateJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// PostMobileLoginJSONRequestBody defines body for PostMobileLogin for application/json ContentType.
type PostMobileLoginJSONRequestBody PostMobileLoginJSONBody

// Bind implements render.Binder.
func (PostMobileLoginJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// PostMobileTokenRefreshJSONRequestBody defines body for PostMobileTokenRefresh for application/json ContentType.
type PostMobileTokenRefreshJSONRequestBody PostMobileTokenRefreshJSONBody

// Bind implements render.Binder.
func (PostMobileTokenRefreshJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// PostMobileUserSwitchJSONRequestBody defines body for PostMobileUserSwitch for application/json ContentType.
type PostMobileUserSwitchJSONRequestBody PostMobileUserSwitchJSONBody

// Bind implements render.Binder.
func (PostMobileUserSwitchJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// PostPasswordResetJSONRequestBody defines body for PostPasswordReset for application/json ContentType.
type PostPasswordResetJSONRequestBody PostPasswordResetJSONBody

// Bind implements render.Binder.
func (PostPasswordResetJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// PostPasswordResetInitJSONRequestBody defines body for PostPasswordResetInit for application/json ContentType.
type PostPasswordResetInitJSONRequestBody PostPasswordResetInitJSONBody

// Bind implements render.Binder.
func (PostPasswordResetInitJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// PostRegisterJSONRequestBody defines body for PostRegister for application/json ContentType.
type PostRegisterJSONRequestBody PostRegisterJSONBody

// Bind implements render.Binder.
func (PostRegisterJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// PostUserSwitchJSONRequestBody defines body for PostUserSwitch for application/json ContentType.
type PostUserSwitchJSONRequestBody PostUserSwitchJSONBody

// Bind implements render.Binder.
func (PostUserSwitchJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// PostUsernameFindJSONRequestBody defines body for PostUsernameFind for application/json ContentType.
type PostUsernameFindJSONRequestBody PostUsernameFindJSONBody

// Bind implements render.Binder.
func (PostUsernameFindJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// Response is a common response struct for all the API calls.
// A Response object may be instantiated via functions for specific operation responses.
// It may also be instantiated directly, for the purpose of responding with a single status code.
type Response struct {
	body        interface{}
	Code        int
	contentType string
}

// Render implements the render.Renderer interface. It sets the Content-Type header
// and status code based on the response definition.
func (resp *Response) Render(w http.ResponseWriter, r *http.Request) error {
	w.Header().Set("Content-Type", resp.contentType)
	render.Status(r, resp.Code)
	return nil
}

// Status is a builder method to override the default status code for a response.
func (resp *Response) Status(code int) *Response {
	resp.Code = code
	return resp
}

// ContentType is a builder method to override the default content type for a response.
func (resp *Response) ContentType(contentType string) *Response {
	resp.contentType = contentType
	return resp
}

// MarshalJSON implements the json.Marshaler interface.
// This is used to only marshal the body of the response.
func (resp *Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(resp.body)
}

// MarshalXML implements the xml.Marshaler interface.
// This is used to only marshal the body of the response.
func (resp *Response) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return e.Encode(resp.body)
}

// Post2faSendJSON200Response is a constructor method for a Post2faSend response.
// A *Response is returned with the configured status code and content type from the spec.
func Post2faSendJSON200Response(body SuccessResponse) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// Post2faValidateJSON200Response is a constructor method for a Post2faValidate response.
// A *Response is returned with the configured status code and content type from the spec.
func Post2faValidateJSON200Response(body SuccessResponse) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// Post2faValidateJSON202Response is a constructor method for a Post2faValidate response.
// A *Response is returned with the configured status code and content type from the spec.
func Post2faValidateJSON202Response(body interface{}) *Response {
	return &Response{
		body:        body,
		Code:        202,
		contentType: "application/json",
	}
}

// PostEmailVerifyJSON200Response is a constructor method for a PostEmailVerify response.
// A *Response is returned with the configured status code and content type from the spec.
func PostEmailVerifyJSON200Response(body struct {
	Message *string `json:"message,omitempty"`
}) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// PostLoginJSON200Response is a constructor method for a PostLogin response.
// A *Response is returned with the configured status code and content type from the spec.
func PostLoginJSON200Response(body Login) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// PostLoginJSON202Response is a constructor method for a PostLogin response.
// A *Response is returned with the configured status code and content type from the spec.
func PostLoginJSON202Response(body interface{}) *Response {
	return &Response{
		body:        body,
		Code:        202,
		contentType: "application/json",
	}
}

// PostLoginJSON400Response is a constructor method for a PostLogin response.
// A *Response is returned with the configured status code and content type from the spec.
func PostLoginJSON400Response(body struct {
	Message *string `json:"message,omitempty"`
}) *Response {
	return &Response{
		body:        body,
		Code:        400,
		contentType: "application/json",
	}
}

// PostLogoutJSON200Response is a constructor method for a PostLogout response.
// A *Response is returned with the configured status code and content type from the spec.
func PostLogoutJSON200Response(body struct {
	Message *string `json:"message,omitempty"`
}) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// PostMobile2faSendJSON200Response is a constructor method for a PostMobile2faSend response.
// A *Response is returned with the configured status code and content type from the spec.
func PostMobile2faSendJSON200Response(body SuccessResponse) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// PostMobile2faValidateJSON200Response is a constructor method for a PostMobile2faValidate response.
// A *Response is returned with the configured status code and content type from the spec.
func PostMobile2faValidateJSON200Response(body struct {
	// JWT access token
	AccessToken string `json:"access_token"`

	// JWT refresh token
	RefreshToken string `json:"refresh_token"`
}) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// PostMobile2faValidateJSON202Response is a constructor method for a PostMobile2faValidate response.
// A *Response is returned with the configured status code and content type from the spec.
func PostMobile2faValidateJSON202Response(body SelectUserRequiredResponse) *Response {
	return &Response{
		body:        body,
		Code:        202,
		contentType: "application/json",
	}
}

// PostMobileLoginJSON200Response is a constructor method for a PostMobileLogin response.
// A *Response is returned with the configured status code and content type from the spec.
func PostMobileLoginJSON200Response(body interface{}) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// PostMobileTokenRefreshJSON200Response is a constructor method for a PostMobileTokenRefresh response.
// A *Response is returned with the configured status code and content type from the spec.
func PostMobileTokenRefreshJSON200Response(body Tokens) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// PostMobileUserSwitchJSON200Response is a constructor method for a PostMobileUserSwitch response.
// A *Response is returned with the configured status code and content type from the spec.
func PostMobileUserSwitchJSON200Response(body interface{}) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// PostMobileUserSwitchJSON400Response is a constructor method for a PostMobileUserSwitch response.
// A *Response is returned with the configured status code and content type from the spec.
func PostMobileUserSwitchJSON400Response(body struct {
	Message *string `json:"message,omitempty"`
}) *Response {
	return &Response{
		body:        body,
		Code:        400,
		contentType: "application/json",
	}
}

// PostMobileUserSwitchJSON403Response is a constructor method for a PostMobileUserSwitch response.
// A *Response is returned with the configured status code and content type from the spec.
func PostMobileUserSwitchJSON403Response(body struct {
	Message *string `json:"message,omitempty"`
}) *Response {
	return &Response{
		body:        body,
		Code:        403,
		contentType: "application/json",
	}
}

// MobileFindUsersWithLoginJSON200Response is a constructor method for a MobileFindUsersWithLogin response.
// A *Response is returned with the configured status code and content type from the spec.
func MobileFindUsersWithLoginJSON200Response(body interface{}) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// PostPasswordResetJSON200Response is a constructor method for a PostPasswordReset response.
// A *Response is returned with the configured status code and content type from the spec.
func PostPasswordResetJSON200Response(body struct {
	Message *string `json:"message,omitempty"`
}) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// PostPasswordResetInitJSON200Response is a constructor method for a PostPasswordResetInit response.
// A *Response is returned with the configured status code and content type from the spec.
func PostPasswordResetInitJSON200Response(body struct {
	Code *string `json:"code,omitempty"`
}) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// GetPasswordResetPolicyJSON200Response is a constructor method for a GetPasswordResetPolicy response.
// A *Response is returned with the configured status code and content type from the spec.
func GetPasswordResetPolicyJSON200Response(body PasswordPolicyResponse) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// PostRegisterJSON201Response is a constructor method for a PostRegister response.
// A *Response is returned with the configured status code and content type from the spec.
func PostRegisterJSON201Response(body struct {
	Email *openapi_types.Email `json:"email,omitempty"`
}) *Response {
	return &Response{
		body:        body,
		Code:        201,
		contentType: "application/json",
	}
}

// PostTokenRefreshJSON200Response is a constructor method for a PostTokenRefresh response.
// A *Response is returned with the configured status code and content type from the spec.
func PostTokenRefreshJSON200Response(body Tokens) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// PostUserSwitchJSON200Response is a constructor method for a PostUserSwitch response.
// A *Response is returned with the configured status code and content type from the spec.
func PostUserSwitchJSON200Response(body interface{}) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// PostUserSwitchJSON400Response is a constructor method for a PostUserSwitch response.
// A *Response is returned with the configured status code and content type from the spec.
func PostUserSwitchJSON400Response(body struct {
	Message *string `json:"message,omitempty"`
}) *Response {
	return &Response{
		body:        body,
		Code:        400,
		contentType: "application/json",
	}
}

// PostUserSwitchJSON403Response is a constructor method for a PostUserSwitch response.
// A *Response is returned with the configured status code and content type from the spec.
func PostUserSwitchJSON403Response(body struct {
	Message *string `json:"message,omitempty"`
}) *Response {
	return &Response{
		body:        body,
		Code:        403,
		contentType: "application/json",
	}
}

// PostUsernameFindJSON200Response is a constructor method for a PostUsernameFind response.
// A *Response is returned with the configured status code and content type from the spec.
func PostUsernameFindJSON200Response(body struct {
	// A message indicating the request was processed
	Message *string `json:"message,omitempty"`
}) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// FindUsersWithLoginJSON200Response is a constructor method for a FindUsersWithLogin response.
// A *Response is returned with the configured status code and content type from the spec.
func FindUsersWithLoginJSON200Response(body interface{}) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Initiate sending 2fa code
	// (POST /2fa/send)
	Post2faSend(w http.ResponseWriter, r *http.Request) *Response
	// Authenticate 2fa passcode
	// (POST /2fa/validate)
	Post2faValidate(w http.ResponseWriter, r *http.Request) *Response
	// Verify email address
	// (POST /email/verify)
	PostEmailVerify(w http.ResponseWriter, r *http.Request) *Response
	// Login a user
	// (POST /login)
	PostLogin(w http.ResponseWriter, r *http.Request) *Response
	// Logout user
	// (POST /logout)
	PostLogout(w http.ResponseWriter, r *http.Request) *Response
	// Initiate sending 2fa code
	// (POST /mobile/2fa/send)
	PostMobile2faSend(w http.ResponseWriter, r *http.Request) *Response
	// Authenticate 2fa passcode
	// (POST /mobile/2fa/validate)
	PostMobile2faValidate(w http.ResponseWriter, r *http.Request) *Response
	// Mobile login endpoint
	// (POST /mobile/login)
	PostMobileLogin(w http.ResponseWriter, r *http.Request) *Response
	// Refresh JWT tokens
	// (POST /mobile/token/refresh)
	PostMobileTokenRefresh(w http.ResponseWriter, r *http.Request) *Response
	// Switch to a different user when multiple users are available for the same login
	// (POST /mobile/user/switch)
	PostMobileUserSwitch(w http.ResponseWriter, r *http.Request) *Response
	// Get a list of users associated with the current login
	// (GET /mobile/users)
	MobileFindUsersWithLogin(w http.ResponseWriter, r *http.Request, params MobileFindUsersWithLoginParams) *Response
	// Reset password
	// (POST /password/reset)
	PostPasswordReset(w http.ResponseWriter, r *http.Request) *Response
	// Initiate password reset using username
	// (POST /password/reset/init)
	PostPasswordResetInit(w http.ResponseWriter, r *http.Request) *Response
	// Get password reset policy
	// (GET /password/reset/policy)
	GetPasswordResetPolicy(w http.ResponseWriter, r *http.Request, params GetPasswordResetPolicyParams) *Response
	// Register a new user
	// (POST /register)
	PostRegister(w http.ResponseWriter, r *http.Request) *Response
	// Refresh JWT tokens
	// (POST /token/refresh)
	PostTokenRefresh(w http.ResponseWriter, r *http.Request) *Response
	// Switch to a different user when multiple users are available for the same login
	// (POST /user/switch)
	PostUserSwitch(w http.ResponseWriter, r *http.Request) *Response
	// Send username to user's email address
	// (POST /username/find)
	PostUsernameFind(w http.ResponseWriter, r *http.Request) *Response
	// Get a list of users associated with the current login
	// (GET /users)
	FindUsersWithLogin(w http.ResponseWriter, r *http.Request) *Response
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler          ServerInterface
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// Post2faSend operation middleware
func (siw *ServerInterfaceWrapper) Post2faSend(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.Post2faSend(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// Post2faValidate operation middleware
func (siw *ServerInterfaceWrapper) Post2faValidate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.Post2faValidate(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// PostEmailVerify operation middleware
func (siw *ServerInterfaceWrapper) PostEmailVerify(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.PostEmailVerify(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// PostLogin operation middleware
func (siw *ServerInterfaceWrapper) PostLogin(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.PostLogin(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// PostLogout operation middleware
func (siw *ServerInterfaceWrapper) PostLogout(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.PostLogout(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// PostMobile2faSend operation middleware
func (siw *ServerInterfaceWrapper) PostMobile2faSend(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.PostMobile2faSend(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// PostMobile2faValidate operation middleware
func (siw *ServerInterfaceWrapper) PostMobile2faValidate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.PostMobile2faValidate(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// PostMobileLogin operation middleware
func (siw *ServerInterfaceWrapper) PostMobileLogin(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.PostMobileLogin(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// PostMobileTokenRefresh operation middleware
func (siw *ServerInterfaceWrapper) PostMobileTokenRefresh(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.PostMobileTokenRefresh(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// PostMobileUserSwitch operation middleware
func (siw *ServerInterfaceWrapper) PostMobileUserSwitch(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.PostMobileUserSwitch(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// MobileFindUsersWithLogin operation middleware
func (siw *ServerInterfaceWrapper) MobileFindUsersWithLogin(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// Parameter object where we will unmarshal all parameters from the context
	var params MobileFindUsersWithLoginParams

	// ------------- Optional query parameter "temp_token" -------------

	if err := runtime.BindQueryParameter("form", true, false, "temp_token", r.URL.Query(), &params.TempToken); err != nil {
		err = fmt.Errorf("invalid format for parameter temp_token: %w", err)
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "temp_token"})
		return
	}

	// ------------- Optional query parameter "access_token" -------------

	if err := runtime.BindQueryParameter("form", true, false, "access_token", r.URL.Query(), &params.AccessToken); err != nil {
		err = fmt.Errorf("invalid format for parameter access_token: %w", err)
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "access_token"})
		return
	}

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.MobileFindUsersWithLogin(w, r, params)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// PostPasswordReset operation middleware
func (siw *ServerInterfaceWrapper) PostPasswordReset(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.PostPasswordReset(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// PostPasswordResetInit operation middleware
func (siw *ServerInterfaceWrapper) PostPasswordResetInit(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.PostPasswordResetInit(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// GetPasswordResetPolicy operation middleware
func (siw *ServerInterfaceWrapper) GetPasswordResetPolicy(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPasswordResetPolicyParams

	// ------------- Required query parameter "token" -------------

	if err := runtime.BindQueryParameter("form", true, true, "token", r.URL.Query(), &params.Token); err != nil {
		err = fmt.Errorf("invalid format for parameter token: %w", err)
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{err, "token"})
		return
	}

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.GetPasswordResetPolicy(w, r, params)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// PostRegister operation middleware
func (siw *ServerInterfaceWrapper) PostRegister(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.PostRegister(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// PostTokenRefresh operation middleware
func (siw *ServerInterfaceWrapper) PostTokenRefresh(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.PostTokenRefresh(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// PostUserSwitch operation middleware
func (siw *ServerInterfaceWrapper) PostUserSwitch(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.PostUserSwitch(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// PostUsernameFind operation middleware
func (siw *ServerInterfaceWrapper) PostUsernameFind(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.PostUsernameFind(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// FindUsersWithLogin operation middleware
func (siw *ServerInterfaceWrapper) FindUsersWithLogin(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.FindUsersWithLogin(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	err       error
	paramName string
}

// Error implements error.
func (err UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter %s: %v", err.paramName, err.err)
}

func (err UnescapedCookieParamError) Unwrap() error { return err.err }

type UnmarshalingParamError struct {
	err       error
	paramName string
}

// Error implements error.
func (err UnmarshalingParamError) Error() string {
	return fmt.Sprintf("error unmarshaling parameter %s as JSON: %v", err.paramName, err.err)
}

func (err UnmarshalingParamError) Unwrap() error { return err.err }

type RequiredParamError struct {
	err       error
	paramName string
}

// Error implements error.
func (err RequiredParamError) Error() string {
	if err.err == nil {
		return fmt.Sprintf("query parameter %s is required, but not found", err.paramName)
	} else {
		return fmt.Sprintf("query parameter %s is required, but errored: %s", err.paramName, err.err)
	}
}

func (err RequiredParamError) Unwrap() error { return err.err }

type RequiredHeaderError struct {
	paramName string
}

// Error implements error.
func (err RequiredHeaderError) Error() string {
	return fmt.Sprintf("header parameter %s is required, but not found", err.paramName)
}

type InvalidParamFormatError struct {
	err       error
	paramName string
}

// Error implements error.
func (err InvalidParamFormatError) Error() string {
	return fmt.Sprintf("invalid format for parameter %s: %v", err.paramName, err.err)
}

func (err InvalidParamFormatError) Unwrap() error { return err.err }

type TooManyValuesForParamError struct {
	NumValues int
	paramName string
}

// Error implements error.
func (err TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("expected one value for %s, got %d", err.paramName, err.NumValues)
}

// ParameterName is an interface that is implemented by error types that are
// relevant to a specific parameter.
type ParameterError interface {
	error
	// ParamName is the name of the parameter that the error is referring to.
	ParamName() string
}

func (err UnescapedCookieParamError) ParamName() string  { return err.paramName }
func (err UnmarshalingParamError) ParamName() string     { return err.paramName }
func (err RequiredParamError) ParamName() string         { return err.paramName }
func (err RequiredHeaderError) ParamName() string        { return err.paramName }
func (err InvalidParamFormatError) ParamName() string    { return err.paramName }
func (err TooManyValuesForParamError) ParamName() string { return err.paramName }

type ServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

type ServerOption func(*ServerOptions)

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface, opts ...ServerOption) http.Handler {
	options := &ServerOptions{
		BaseURL:    "/",
		BaseRouter: chi.NewRouter(),
		ErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
	}

	for _, f := range opts {
		f(options)
	}

	r := options.BaseRouter
	wrapper := ServerInterfaceWrapper{
		Handler:          si,
		ErrorHandlerFunc: options.ErrorHandlerFunc,
	}

	r.Route(options.BaseURL, func(r chi.Router) {
		r.Post("/2fa/send", wrapper.Post2faSend)
		r.Post("/2fa/validate", wrapper.Post2faValidate)
		r.Post("/email/verify", wrapper.PostEmailVerify)
		r.Post("/login", wrapper.PostLogin)
		r.Post("/logout", wrapper.PostLogout)
		r.Post("/mobile/2fa/send", wrapper.PostMobile2faSend)
		r.Post("/mobile/2fa/validate", wrapper.PostMobile2faValidate)
		r.Post("/mobile/login", wrapper.PostMobileLogin)
		r.Post("/mobile/token/refresh", wrapper.PostMobileTokenRefresh)
		r.Post("/mobile/user/switch", wrapper.PostMobileUserSwitch)
		r.Get("/mobile/users", wrapper.MobileFindUsersWithLogin)
		r.Post("/password/reset", wrapper.PostPasswordReset)
		r.Post("/password/reset/init", wrapper.PostPasswordResetInit)
		r.Get("/password/reset/policy", wrapper.GetPasswordResetPolicy)
		r.Post("/register", wrapper.PostRegister)
		r.Post("/token/refresh", wrapper.PostTokenRefresh)
		r.Post("/user/switch", wrapper.PostUserSwitch)
		r.Post("/username/find", wrapper.PostUsernameFind)
		r.Get("/users", wrapper.FindUsersWithLogin)
	})
	return r
}

func WithRouter(r chi.Router) ServerOption {
	return func(s *ServerOptions) {
		s.BaseRouter = r
	}
}

func WithServerBaseURL(url string) ServerOption {
	return func(s *ServerOptions) {
		s.BaseURL = url
	}
}

func WithErrorHandler(handler func(w http.ResponseWriter, r *http.Request, err error)) ServerOption {
	return func(s *ServerOptions) {
		s.ErrorHandlerFunc = handler
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"Ial0EfS0qeWfPOublnW1H5d40yVn214u2HFlaxSIpJBMYMuNFuSLCvJT3Gn7/VfV+Kfy6oS7gBlNwmfN",
	"1av7D4+L3Jeai8YPr8qgxJAX1hK3XjJwXegVw3iSjww/XLvRT+Whw2l732XB8MyJvWaCkjgbEZST7uOn",
	"diefMer311X9y0kvQVzvgK0yCyTGRMZc9o2JbSiU1T31Ecqmusyxvrm5Mc6qKjYhkaSyFMlh9VOFbI9Y",
	"u6Efn3pDv0kktMRMKvY/Z8sGbgQzpgcuS6ZsaZroNmdcNyMoSViaggJRneyrDHbeT1aPMhUQek8Zp3fc",
	"3cNZJNC8Oh96hGMNsQQP0ziWqd8C648Ms/qUL6iiOaCd/Wk0zE32EHwpQa3ri62zXY4Id3zTM+gE/vGJ",
	"7yR6wwvcPkvAex5iHiX6FaBicF9Fe7fX8DMgoYTvfcAbl8oCbAcsdeq0UM1TsMGTqf1q7Djt3fYa33ln",
	"93L7JE8DjicHu6/NfKZfsPpt2zT726dwz+ADu87R/TBQSz/CCfMaDUV7cqmZWDaP1L1uKuzb5kFe/Rna",
	"bnJPofexamcPo/zalLjt5s/xmHAKVDovvkfpzENeHTdUNrbmV9W7yvHQqF9fHikiuo87J8XDDwfEQ/M0",
	"ZcIf0+yNEHvlECvYFxX1LgklAlY7Dd0ZFWavtvxT1myTi7UjlGkvpdJLqfRSKj1PqVSf9IuUte+pOi5I",
	"CRXNHw/AA9Oot1l1oeQ9SyBx9/ZhE6H2Dd6KcU7u7I0Guu1R7FzwhwO8YuabAu1IZ5rv70CfM99um/ic",
	"VJ8IE4mVJpbWkjXsV1QbS5sot+8MdiJvxDu1sUOyqnyhQSRtF6EkDE8eh+TKcFvNWqfNCfHpFpqfHAQa",
	"DHnxctINAdj9Y1v3Glf9Q/vei4wX/96y/6Va3lMtbzb/DwAA//8kcUacwz8AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
