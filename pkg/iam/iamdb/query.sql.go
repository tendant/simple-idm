// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package iamdb

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const anyUserExists = `-- name: AnyUserExists :one
SELECT EXISTS (
    SELECT 1 FROM users
) as exists
`

func (q *Queries) AnyUserExists(ctx context.Context) (bool, error) {
	row := q.db.QueryRow(ctx, anyUserExists)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createGroup = `-- name: CreateGroup :one

INSERT INTO groups (name, description)
VALUES ($1, $2)
RETURNING id, name, description, created_at, updated_at, deleted_at
`

type CreateGroupParams struct {
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
}

// Group queries
func (q *Queries) CreateGroup(ctx context.Context, arg CreateGroupParams) (Group, error) {
	row := q.db.QueryRow(ctx, createGroup, arg.Name, arg.Description)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const createRole = `-- name: CreateRole :one
INSERT INTO roles (name) VALUES ($1) RETURNING id
`

func (q *Queries) CreateRole(ctx context.Context, name string) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createRole, name)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (email, name, login_id)
VALUES ($1, $2, $3)
RETURNING id, created_at, last_modified_at, deleted_at, created_by, email, name, login_id, phone
`

type CreateUserParams struct {
	Email   string         `json:"email"`
	Name    sql.NullString `json:"name"`
	LoginID uuid.NullUUID  `json:"login_id"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Email, arg.Name, arg.LoginID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.LastModifiedAt,
		&i.DeletedAt,
		&i.CreatedBy,
		&i.Email,
		&i.Name,
		&i.LoginID,
		&i.Phone,
	)
	return i, err
}

const createUserGroup = `-- name: CreateUserGroup :one
INSERT INTO user_groups (user_id, group_id)
VALUES ($1, $2)
RETURNING user_id, group_id, assigned_at, deleted_at
`

type CreateUserGroupParams struct {
	UserID  uuid.UUID `json:"user_id"`
	GroupID uuid.UUID `json:"group_id"`
}

func (q *Queries) CreateUserGroup(ctx context.Context, arg CreateUserGroupParams) (UserGroup, error) {
	row := q.db.QueryRow(ctx, createUserGroup, arg.UserID, arg.GroupID)
	var i UserGroup
	err := row.Scan(
		&i.UserID,
		&i.GroupID,
		&i.AssignedAt,
		&i.DeletedAt,
	)
	return i, err
}

const createUserRole = `-- name: CreateUserRole :one
INSERT INTO user_roles (user_id, role_id)
VALUES ($1, $2)
RETURNING user_id, role_id
`

type CreateUserRoleParams struct {
	UserID uuid.UUID `json:"user_id"`
	RoleID uuid.UUID `json:"role_id"`
}

func (q *Queries) CreateUserRole(ctx context.Context, arg CreateUserRoleParams) (UserRole, error) {
	row := q.db.QueryRow(ctx, createUserRole, arg.UserID, arg.RoleID)
	var i UserRole
	err := row.Scan(&i.UserID, &i.RoleID)
	return i, err
}

type CreateUserRoleBatchParams struct {
	UserID uuid.UUID `json:"user_id"`
	RoleID uuid.UUID `json:"role_id"`
}

const deleteGroup = `-- name: DeleteGroup :exec
UPDATE groups
SET deleted_at = NOW() at time zone 'UTC'
WHERE id = $1
`

func (q *Queries) DeleteGroup(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteGroup, id)
	return err
}

const deleteRole = `-- name: DeleteRole :exec
DELETE FROM roles WHERE id = $1
`

func (q *Queries) DeleteRole(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteRole, id)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
UPDATE users
SET deleted_at = CURRENT_TIMESTAMP
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const deleteUserGroup = `-- name: DeleteUserGroup :exec
UPDATE user_groups
SET deleted_at = NOW() at time zone 'UTC'
WHERE user_id = $1 AND group_id = $2
`

type DeleteUserGroupParams struct {
	UserID  uuid.UUID `json:"user_id"`
	GroupID uuid.UUID `json:"group_id"`
}

func (q *Queries) DeleteUserGroup(ctx context.Context, arg DeleteUserGroupParams) error {
	_, err := q.db.Exec(ctx, deleteUserGroup, arg.UserID, arg.GroupID)
	return err
}

const deleteUserRoles = `-- name: DeleteUserRoles :exec
DELETE FROM user_roles
WHERE user_id = $1
`

func (q *Queries) DeleteUserRoles(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUserRoles, userID)
	return err
}

const findGroupUsers = `-- name: FindGroupUsers :many
SELECT u.id, u.email, u.name
FROM users u
JOIN user_groups ug ON ug.user_id = u.id
WHERE ug.group_id = $1 
AND u.deleted_at IS NULL
AND ug.deleted_at IS NULL
ORDER BY u.email
`

type FindGroupUsersRow struct {
	ID    uuid.UUID      `json:"id"`
	Email string         `json:"email"`
	Name  sql.NullString `json:"name"`
}

func (q *Queries) FindGroupUsers(ctx context.Context, groupID uuid.UUID) ([]FindGroupUsersRow, error) {
	rows, err := q.db.Query(ctx, findGroupUsers, groupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindGroupUsersRow
	for rows.Next() {
		var i FindGroupUsersRow
		if err := rows.Scan(&i.ID, &i.Email, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findGroups = `-- name: FindGroups :many
SELECT id, created_at, updated_at, name, description
FROM groups
WHERE deleted_at IS NULL
ORDER BY name ASC
`

type FindGroupsRow struct {
	ID          uuid.UUID      `json:"id"`
	CreatedAt   sql.NullTime   `json:"created_at"`
	UpdatedAt   sql.NullTime   `json:"updated_at"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
}

func (q *Queries) FindGroups(ctx context.Context) ([]FindGroupsRow, error) {
	rows, err := q.db.Query(ctx, findGroups)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindGroupsRow
	for rows.Next() {
		var i FindGroupsRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findRoles = `-- name: FindRoles :many

SELECT id, name
FROM roles
ORDER BY name ASC
`

type FindRolesRow struct {
	ID   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

// Role queries
func (q *Queries) FindRoles(ctx context.Context) ([]FindRolesRow, error) {
	rows, err := q.db.Query(ctx, findRoles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindRolesRow
	for rows.Next() {
		var i FindRolesRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findUsers = `-- name: FindUsers :many
SELECT u.id, u.created_at, u.last_modified_at, u.deleted_at, u.created_by, u.email, u.name, u.login_id, l.username
FROM users u
JOIN login l ON u.login_id = l.id
WHERE u.deleted_at IS NULL
ORDER BY u.created_at ASC
limit 50
`

type FindUsersRow struct {
	ID             uuid.UUID      `json:"id"`
	CreatedAt      time.Time      `json:"created_at"`
	LastModifiedAt time.Time      `json:"last_modified_at"`
	DeletedAt      sql.NullTime   `json:"deleted_at"`
	CreatedBy      sql.NullString `json:"created_by"`
	Email          string         `json:"email"`
	Name           sql.NullString `json:"name"`
	LoginID        uuid.NullUUID  `json:"login_id"`
	Username       sql.NullString `json:"username"`
}

func (q *Queries) FindUsers(ctx context.Context) ([]FindUsersRow, error) {
	rows, err := q.db.Query(ctx, findUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindUsersRow
	for rows.Next() {
		var i FindUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.LastModifiedAt,
			&i.DeletedAt,
			&i.CreatedBy,
			&i.Email,
			&i.Name,
			&i.LoginID,
			&i.Username,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findUsersWithRoles = `-- name: FindUsersWithRoles :many
SELECT u.id, u.created_at, u.last_modified_at, u.deleted_at, u.created_by, u.email, u.name,
       json_agg(json_build_object(
           'id', r.id,
           'name', r.name
       )) as roles,
       l.username,
       u.login_id
FROM users u
LEFT JOIN user_roles ur ON u.id = ur.user_id
LEFT JOIN roles r ON ur.role_id = r.id
LEFT JOIN login l ON u.login_id = l.id
WHERE u.deleted_at IS NULL
GROUP BY u.id, u.created_at, u.last_modified_at, u.deleted_at, u.created_by, u.email, u.name, l.username, u.login_id
ORDER BY u.created_at ASC
LIMIT 50
`

type FindUsersWithRolesRow struct {
	ID             uuid.UUID      `json:"id"`
	CreatedAt      time.Time      `json:"created_at"`
	LastModifiedAt time.Time      `json:"last_modified_at"`
	DeletedAt      sql.NullTime   `json:"deleted_at"`
	CreatedBy      sql.NullString `json:"created_by"`
	Email          string         `json:"email"`
	Name           sql.NullString `json:"name"`
	Roles          []byte         `json:"roles"`
	Username       sql.NullString `json:"username"`
	LoginID        uuid.NullUUID  `json:"login_id"`
}

func (q *Queries) FindUsersWithRoles(ctx context.Context) ([]FindUsersWithRolesRow, error) {
	rows, err := q.db.Query(ctx, findUsersWithRoles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindUsersWithRolesRow
	for rows.Next() {
		var i FindUsersWithRolesRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.LastModifiedAt,
			&i.DeletedAt,
			&i.CreatedBy,
			&i.Email,
			&i.Name,
			&i.Roles,
			&i.Username,
			&i.LoginID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGroupById = `-- name: GetGroupById :one
SELECT id, created_at, updated_at, deleted_at, name, description
FROM groups
WHERE id = $1 AND deleted_at IS NULL
`

type GetGroupByIdRow struct {
	ID          uuid.UUID      `json:"id"`
	CreatedAt   sql.NullTime   `json:"created_at"`
	UpdatedAt   sql.NullTime   `json:"updated_at"`
	DeletedAt   sql.NullTime   `json:"deleted_at"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
}

func (q *Queries) GetGroupById(ctx context.Context, id uuid.UUID) (GetGroupByIdRow, error) {
	row := q.db.QueryRow(ctx, getGroupById, id)
	var i GetGroupByIdRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Name,
		&i.Description,
	)
	return i, err
}

const getRoleById = `-- name: GetRoleById :one
SELECT id, name
FROM roles
WHERE id = $1
`

type GetRoleByIdRow struct {
	ID   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

func (q *Queries) GetRoleById(ctx context.Context, id uuid.UUID) (GetRoleByIdRow, error) {
	row := q.db.QueryRow(ctx, getRoleById, id)
	var i GetRoleByIdRow
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getRoleUsers = `-- name: GetRoleUsers :many
SELECT u.id, u.email, u.name
FROM users u
JOIN user_roles ur ON ur.user_id = u.id
WHERE ur.role_id = $1
ORDER BY u.email
`

type GetRoleUsersRow struct {
	ID    uuid.UUID      `json:"id"`
	Email string         `json:"email"`
	Name  sql.NullString `json:"name"`
}

func (q *Queries) GetRoleUsers(ctx context.Context, roleID uuid.UUID) ([]GetRoleUsersRow, error) {
	rows, err := q.db.Query(ctx, getRoleUsers, roleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRoleUsersRow
	for rows.Next() {
		var i GetRoleUsersRow
		if err := rows.Scan(&i.ID, &i.Email, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserById = `-- name: GetUserById :one
SELECT id, created_at, last_modified_at, deleted_at, created_by, email, name
FROM users
WHERE id = $1
`

type GetUserByIdRow struct {
	ID             uuid.UUID      `json:"id"`
	CreatedAt      time.Time      `json:"created_at"`
	LastModifiedAt time.Time      `json:"last_modified_at"`
	DeletedAt      sql.NullTime   `json:"deleted_at"`
	CreatedBy      sql.NullString `json:"created_by"`
	Email          string         `json:"email"`
	Name           sql.NullString `json:"name"`
}

func (q *Queries) GetUserById(ctx context.Context, id uuid.UUID) (GetUserByIdRow, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i GetUserByIdRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.LastModifiedAt,
		&i.DeletedAt,
		&i.CreatedBy,
		&i.Email,
		&i.Name,
	)
	return i, err
}

const getUserWithRoles = `-- name: GetUserWithRoles :one
SELECT u.id, u.created_at, u.last_modified_at, u.deleted_at, u.created_by, u.email, u.name,
       json_agg(json_build_object(
           'id', r.id,
           'name', r.name
       )) as roles,
       l.username,
       u.login_id
FROM users u
LEFT JOIN user_roles ur ON u.id = ur.user_id
LEFT JOIN roles r ON ur.role_id = r.id
LEFT JOIN login l ON u.login_id = l.id
WHERE u.id = $1
GROUP BY u.id, u.created_at, u.last_modified_at, u.deleted_at, u.created_by, u.email, u.name, l.username, u.login_id
`

type GetUserWithRolesRow struct {
	ID             uuid.UUID      `json:"id"`
	CreatedAt      time.Time      `json:"created_at"`
	LastModifiedAt time.Time      `json:"last_modified_at"`
	DeletedAt      sql.NullTime   `json:"deleted_at"`
	CreatedBy      sql.NullString `json:"created_by"`
	Email          string         `json:"email"`
	Name           sql.NullString `json:"name"`
	Roles          []byte         `json:"roles"`
	Username       sql.NullString `json:"username"`
	LoginID        uuid.NullUUID  `json:"login_id"`
}

func (q *Queries) GetUserWithRoles(ctx context.Context, id uuid.UUID) (GetUserWithRolesRow, error) {
	row := q.db.QueryRow(ctx, getUserWithRoles, id)
	var i GetUserWithRolesRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.LastModifiedAt,
		&i.DeletedAt,
		&i.CreatedBy,
		&i.Email,
		&i.Name,
		&i.Roles,
		&i.Username,
		&i.LoginID,
	)
	return i, err
}

const hasUsers = `-- name: HasUsers :one
SELECT EXISTS (
    SELECT 1 FROM user_roles WHERE role_id = $1
) as has_users
`

func (q *Queries) HasUsers(ctx context.Context, roleID uuid.UUID) (bool, error) {
	row := q.db.QueryRow(ctx, hasUsers, roleID)
	var has_users bool
	err := row.Scan(&has_users)
	return has_users, err
}

const removeUserFromRole = `-- name: RemoveUserFromRole :exec
DELETE FROM user_roles 
WHERE user_id = $1 AND role_id = $2
`

type RemoveUserFromRoleParams struct {
	UserID uuid.UUID `json:"user_id"`
	RoleID uuid.UUID `json:"role_id"`
}

func (q *Queries) RemoveUserFromRole(ctx context.Context, arg RemoveUserFromRoleParams) error {
	_, err := q.db.Exec(ctx, removeUserFromRole, arg.UserID, arg.RoleID)
	return err
}

const updateGroup = `-- name: UpdateGroup :one
UPDATE groups 
SET name = $2, description = $3, updated_at = NOW() at time zone 'UTC'
WHERE id = $1 AND deleted_at IS NULL
RETURNING id, name, description, created_at, updated_at, deleted_at
`

type UpdateGroupParams struct {
	ID          uuid.UUID      `json:"id"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
}

func (q *Queries) UpdateGroup(ctx context.Context, arg UpdateGroupParams) (Group, error) {
	row := q.db.QueryRow(ctx, updateGroup, arg.ID, arg.Name, arg.Description)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updateRole = `-- name: UpdateRole :exec
UPDATE roles SET name = $2 WHERE id = $1
`

type UpdateRoleParams struct {
	ID   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

func (q *Queries) UpdateRole(ctx context.Context, arg UpdateRoleParams) error {
	_, err := q.db.Exec(ctx, updateRole, arg.ID, arg.Name)
	return err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users SET name = $2 WHERE id = $1
RETURNING id, created_at, last_modified_at, deleted_at, created_by, email, name, login_id, phone
`

type UpdateUserParams struct {
	ID   uuid.UUID      `json:"id"`
	Name sql.NullString `json:"name"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser, arg.ID, arg.Name)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.LastModifiedAt,
		&i.DeletedAt,
		&i.CreatedBy,
		&i.Email,
		&i.Name,
		&i.LoginID,
		&i.Phone,
	)
	return i, err
}

const updateUserLoginID = `-- name: UpdateUserLoginID :one
UPDATE users SET login_id = $2 WHERE id = $1
RETURNING id, created_at, last_modified_at, deleted_at, created_by, email, name, login_id, phone
`

type UpdateUserLoginIDParams struct {
	ID      uuid.UUID     `json:"id"`
	LoginID uuid.NullUUID `json:"login_id"`
}

func (q *Queries) UpdateUserLoginID(ctx context.Context, arg UpdateUserLoginIDParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserLoginID, arg.ID, arg.LoginID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.LastModifiedAt,
		&i.DeletedAt,
		&i.CreatedBy,
		&i.Email,
		&i.Name,
		&i.LoginID,
		&i.Phone,
	)
	return i, err
}

const upsertUserGroup = `-- name: UpsertUserGroup :one
INSERT INTO user_groups (user_id, group_id, assigned_at)
VALUES ($1, $2, NOW() AT TIME ZONE 'UTC')
ON CONFLICT (user_id, group_id) 
DO UPDATE SET 
    deleted_at = NULL,
    assigned_at = NOW() AT TIME ZONE 'UTC'
RETURNING user_id, group_id, assigned_at, deleted_at
`

type UpsertUserGroupParams struct {
	UserID  uuid.UUID `json:"user_id"`
	GroupID uuid.UUID `json:"group_id"`
}

func (q *Queries) UpsertUserGroup(ctx context.Context, arg UpsertUserGroupParams) (UserGroup, error) {
	row := q.db.QueryRow(ctx, upsertUserGroup, arg.UserID, arg.GroupID)
	var i UserGroup
	err := row.Scan(
		&i.UserID,
		&i.GroupID,
		&i.AssignedAt,
		&i.DeletedAt,
	)
	return i, err
}
